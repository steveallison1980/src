{"ast":null,"code":"import _slicedToArray from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Injectable, NgModule, Input, ɵɵdefineInjectable } from '@angular/core';\nimport { MediaMarshaller, BaseDirective2, StyleBuilder, StyleUtils, CoreModule } from '@angular/flex-layout/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/grid-align/grid-align.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/flex-layout/core';\nvar ROW_DEFAULT = 'stretch';\n/** @type {?} */\n\nvar COL_DEFAULT = 'stretch';\n\nvar GridAlignStyleBuilder = /*#__PURE__*/function (_StyleBuilder) {\n  _inherits(GridAlignStyleBuilder, _StyleBuilder);\n\n  var _super = _createSuper(GridAlignStyleBuilder);\n\n  function GridAlignStyleBuilder() {\n    _classCallCheck(this, GridAlignStyleBuilder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridAlignStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function buildStyles(input) {\n      return buildCss(input || ROW_DEFAULT);\n    }\n  }]);\n\n  return GridAlignStyleBuilder;\n}(StyleBuilder);\n\nGridAlignStyleBuilder.ɵfac = function GridAlignStyleBuilder_Factory(t) {\n  return ɵGridAlignStyleBuilder_BaseFactory(t || GridAlignStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridAlignStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridAlignStyleBuilder_Factory() {\n    return new GridAlignStyleBuilder();\n  },\n  token: GridAlignStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridAlignStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAlignStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAlignStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridAlignDirective = /*#__PURE__*/function (_BaseDirective) {\n  _inherits(GridAlignDirective, _BaseDirective);\n\n  var _super2 = _createSuper(GridAlignDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridAlignDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this;\n\n    _classCallCheck(this, GridAlignDirective);\n\n    _this = _super2.call(this, elementRef, styleBuilder, styler, marshal);\n    _this.DIRECTIVE_KEY = 'grid-align';\n    _this.styleCache = alignCache;\n\n    _this.init();\n\n    return _this;\n  }\n\n  return GridAlignDirective;\n}(BaseDirective2);\n\nGridAlignDirective.ɵfac = function GridAlignDirective_Factory(t) {\n  return new (t || GridAlignDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAlignStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridAlignDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridAlignDirective,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridAlignDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridAlignStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAlignDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridAlignStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, null);\n})();\n/** @type {?} */\n\n\nvar alignCache = new Map();\n/** @type {?} */\n\nvar inputs = ['gdGridAlign', 'gdGridAlign.xs', 'gdGridAlign.sm', 'gdGridAlign.md', 'gdGridAlign.lg', 'gdGridAlign.xl', 'gdGridAlign.lt-sm', 'gdGridAlign.lt-md', 'gdGridAlign.lt-lg', 'gdGridAlign.lt-xl', 'gdGridAlign.gt-xs', 'gdGridAlign.gt-sm', 'gdGridAlign.gt-md', 'gdGridAlign.gt-lg'];\n/** @type {?} */\n\nvar selector = \"\\n  [gdGridAlign],\\n  [gdGridAlign.xs], [gdGridAlign.sm], [gdGridAlign.md], [gdGridAlign.lg],[gdGridAlign.xl],\\n  [gdGridAlign.lt-sm], [gdGridAlign.lt-md], [gdGridAlign.lt-lg], [gdGridAlign.lt-xl],\\n  [gdGridAlign.gt-xs], [gdGridAlign.gt-sm], [gdGridAlign.gt-md], [gdGridAlign.gt-lg]\\n\";\n/**\n * 'align' CSS Grid styling directive for grid children\n *  Defines positioning of child elements along row and column axis in a grid container\n *  Optional values: {row-axis} values or {row-axis column-axis} value pairs\n *\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\n */\n\nvar DefaultGridAlignDirective = /*#__PURE__*/function (_GridAlignDirective) {\n  _inherits(DefaultGridAlignDirective, _GridAlignDirective);\n\n  var _super3 = _createSuper(DefaultGridAlignDirective);\n\n  function DefaultGridAlignDirective() {\n    var _this2;\n\n    _classCallCheck(this, DefaultGridAlignDirective);\n\n    _this2 = _super3.apply(this, arguments);\n    _this2.inputs = inputs;\n    return _this2;\n  }\n\n  return DefaultGridAlignDirective;\n}(GridAlignDirective);\n\nDefaultGridAlignDirective.ɵfac = function DefaultGridAlignDirective_Factory(t) {\n  return ɵDefaultGridAlignDirective_BaseFactory(t || DefaultGridAlignDirective);\n};\n\nDefaultGridAlignDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridAlignDirective,\n  selectors: [[\"\", \"gdGridAlign\", \"\"], [\"\", \"gdGridAlign.xs\", \"\"], [\"\", \"gdGridAlign.sm\", \"\"], [\"\", \"gdGridAlign.md\", \"\"], [\"\", \"gdGridAlign.lg\", \"\"], [\"\", \"gdGridAlign.xl\", \"\"], [\"\", \"gdGridAlign.lt-sm\", \"\"], [\"\", \"gdGridAlign.lt-md\", \"\"], [\"\", \"gdGridAlign.lt-lg\", \"\"], [\"\", \"gdGridAlign.lt-xl\", \"\"], [\"\", \"gdGridAlign.gt-xs\", \"\"], [\"\", \"gdGridAlign.gt-sm\", \"\"], [\"\", \"gdGridAlign.gt-md\", \"\"], [\"\", \"gdGridAlign.gt-lg\", \"\"]],\n  inputs: {\n    gdGridAlign: \"gdGridAlign\",\n    \"gdGridAlign.xs\": \"gdGridAlign.xs\",\n    \"gdGridAlign.sm\": \"gdGridAlign.sm\",\n    \"gdGridAlign.md\": \"gdGridAlign.md\",\n    \"gdGridAlign.lg\": \"gdGridAlign.lg\",\n    \"gdGridAlign.xl\": \"gdGridAlign.xl\",\n    \"gdGridAlign.lt-sm\": \"gdGridAlign.lt-sm\",\n    \"gdGridAlign.lt-md\": \"gdGridAlign.lt-md\",\n    \"gdGridAlign.lt-lg\": \"gdGridAlign.lt-lg\",\n    \"gdGridAlign.lt-xl\": \"gdGridAlign.lt-xl\",\n    \"gdGridAlign.gt-xs\": \"gdGridAlign.gt-xs\",\n    \"gdGridAlign.gt-sm\": \"gdGridAlign.gt-sm\",\n    \"gdGridAlign.gt-md\": \"gdGridAlign.gt-md\",\n    \"gdGridAlign.gt-lg\": \"gdGridAlign.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridAlignDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAlignDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridAlignDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector,\n      inputs: inputs\n    }]\n  }], null, null);\n})();\n/**\n * @param {?=} align\n * @return {?}\n */\n\n\nfunction buildCss() {\n  var align = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  /** @type {?} */\n  var css = {};\n\n  var _align$split = align.split(' '),\n      _align$split2 = _slicedToArray(_align$split, 2),\n      rowAxis = _align$split2[0],\n      columnAxis = _align$split2[1]; // Row axis\n\n\n  switch (rowAxis) {\n    case 'end':\n      css['justify-self'] = 'end';\n      break;\n\n    case 'center':\n      css['justify-self'] = 'center';\n      break;\n\n    case 'stretch':\n      css['justify-self'] = 'stretch';\n      break;\n\n    case 'start':\n      css['justify-self'] = 'start';\n      break;\n\n    default:\n      css['justify-self'] = ROW_DEFAULT; // default row axis\n\n      break;\n  } // Column axis\n\n\n  switch (columnAxis) {\n    case 'end':\n      css['align-self'] = 'end';\n      break;\n\n    case 'center':\n      css['align-self'] = 'center';\n      break;\n\n    case 'stretch':\n      css['align-self'] = 'stretch';\n      break;\n\n    case 'start':\n      css['align-self'] = 'start';\n      break;\n\n    default:\n      css['align-self'] = COL_DEFAULT; // default column axis\n\n      break;\n  }\n\n  return css;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/align-columns/align-columns.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_MAIN = 'start';\n/** @type {?} */\n\nvar DEFAULT_CROSS = 'stretch';\n\nvar GridAlignColumnsStyleBuilder = /*#__PURE__*/function (_StyleBuilder2) {\n  _inherits(GridAlignColumnsStyleBuilder, _StyleBuilder2);\n\n  var _super4 = _createSuper(GridAlignColumnsStyleBuilder);\n\n  function GridAlignColumnsStyleBuilder() {\n    _classCallCheck(this, GridAlignColumnsStyleBuilder);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(GridAlignColumnsStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      return buildCss$1(input || \"\".concat(DEFAULT_MAIN, \" \").concat(DEFAULT_CROSS), parent.inline);\n    }\n  }]);\n\n  return GridAlignColumnsStyleBuilder;\n}(StyleBuilder);\n\nGridAlignColumnsStyleBuilder.ɵfac = function GridAlignColumnsStyleBuilder_Factory(t) {\n  return ɵGridAlignColumnsStyleBuilder_BaseFactory(t || GridAlignColumnsStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridAlignColumnsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridAlignColumnsStyleBuilder_Factory() {\n    return new GridAlignColumnsStyleBuilder();\n  },\n  token: GridAlignColumnsStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridAlignColumnsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAlignColumnsStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAlignColumnsStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridAlignColumnsDirective = /*#__PURE__*/function (_BaseDirective2) {\n  _inherits(GridAlignColumnsDirective, _BaseDirective2);\n\n  var _super5 = _createSuper(GridAlignColumnsDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridAlignColumnsDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this3;\n\n    _classCallCheck(this, GridAlignColumnsDirective);\n\n    _this3 = _super5.call(this, elementRef, styleBuilder, styler, marshal);\n    _this3.DIRECTIVE_KEY = 'grid-align-columns';\n    _this3._inline = false;\n\n    _this3.init();\n\n    return _this3;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridAlignColumnsDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? alignColumnsInlineCache : alignColumnsCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridAlignColumnsDirective;\n}(BaseDirective2);\n\nGridAlignColumnsDirective.ɵfac = function GridAlignColumnsDirective_Factory(t) {\n  return new (t || GridAlignColumnsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAlignColumnsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridAlignColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridAlignColumnsDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridAlignColumnsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridAlignColumnsStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridAlignColumnsDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAlignColumnsDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridAlignColumnsStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar alignColumnsCache = new Map();\n/** @type {?} */\n\nvar alignColumnsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$1 = ['gdAlignColumns', 'gdAlignColumns.xs', 'gdAlignColumns.sm', 'gdAlignColumns.md', 'gdAlignColumns.lg', 'gdAlignColumns.xl', 'gdAlignColumns.lt-sm', 'gdAlignColumns.lt-md', 'gdAlignColumns.lt-lg', 'gdAlignColumns.lt-xl', 'gdAlignColumns.gt-xs', 'gdAlignColumns.gt-sm', 'gdAlignColumns.gt-md', 'gdAlignColumns.gt-lg'];\n/** @type {?} */\n\nvar selector$1 = \"\\n  [gdAlignColumns],\\n  [gdAlignColumns.xs], [gdAlignColumns.sm], [gdAlignColumns.md],\\n  [gdAlignColumns.lg], [gdAlignColumns.xl], [gdAlignColumns.lt-sm],\\n  [gdAlignColumns.lt-md], [gdAlignColumns.lt-lg], [gdAlignColumns.lt-xl],\\n  [gdAlignColumns.gt-xs], [gdAlignColumns.gt-sm], [gdAlignColumns.gt-md],\\n  [gdAlignColumns.gt-lg]\\n\";\n/**\n * 'column alignment' CSS Grid styling directive\n * Configures the alignment in the column direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21\n */\n\nvar DefaultGridAlignColumnsDirective = /*#__PURE__*/function (_GridAlignColumnsDire) {\n  _inherits(DefaultGridAlignColumnsDirective, _GridAlignColumnsDire);\n\n  var _super6 = _createSuper(DefaultGridAlignColumnsDirective);\n\n  function DefaultGridAlignColumnsDirective() {\n    var _this4;\n\n    _classCallCheck(this, DefaultGridAlignColumnsDirective);\n\n    _this4 = _super6.apply(this, arguments);\n    _this4.inputs = inputs$1;\n    return _this4;\n  }\n\n  return DefaultGridAlignColumnsDirective;\n}(GridAlignColumnsDirective);\n\nDefaultGridAlignColumnsDirective.ɵfac = function DefaultGridAlignColumnsDirective_Factory(t) {\n  return ɵDefaultGridAlignColumnsDirective_BaseFactory(t || DefaultGridAlignColumnsDirective);\n};\n\nDefaultGridAlignColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridAlignColumnsDirective,\n  selectors: [[\"\", \"gdAlignColumns\", \"\"], [\"\", \"gdAlignColumns.xs\", \"\"], [\"\", \"gdAlignColumns.sm\", \"\"], [\"\", \"gdAlignColumns.md\", \"\"], [\"\", \"gdAlignColumns.lg\", \"\"], [\"\", \"gdAlignColumns.xl\", \"\"], [\"\", \"gdAlignColumns.lt-sm\", \"\"], [\"\", \"gdAlignColumns.lt-md\", \"\"], [\"\", \"gdAlignColumns.lt-lg\", \"\"], [\"\", \"gdAlignColumns.lt-xl\", \"\"], [\"\", \"gdAlignColumns.gt-xs\", \"\"], [\"\", \"gdAlignColumns.gt-sm\", \"\"], [\"\", \"gdAlignColumns.gt-md\", \"\"], [\"\", \"gdAlignColumns.gt-lg\", \"\"]],\n  inputs: {\n    gdAlignColumns: \"gdAlignColumns\",\n    \"gdAlignColumns.xs\": \"gdAlignColumns.xs\",\n    \"gdAlignColumns.sm\": \"gdAlignColumns.sm\",\n    \"gdAlignColumns.md\": \"gdAlignColumns.md\",\n    \"gdAlignColumns.lg\": \"gdAlignColumns.lg\",\n    \"gdAlignColumns.xl\": \"gdAlignColumns.xl\",\n    \"gdAlignColumns.lt-sm\": \"gdAlignColumns.lt-sm\",\n    \"gdAlignColumns.lt-md\": \"gdAlignColumns.lt-md\",\n    \"gdAlignColumns.lt-lg\": \"gdAlignColumns.lt-lg\",\n    \"gdAlignColumns.lt-xl\": \"gdAlignColumns.lt-xl\",\n    \"gdAlignColumns.gt-xs\": \"gdAlignColumns.gt-xs\",\n    \"gdAlignColumns.gt-sm\": \"gdAlignColumns.gt-sm\",\n    \"gdAlignColumns.gt-md\": \"gdAlignColumns.gt-md\",\n    \"gdAlignColumns.gt-lg\": \"gdAlignColumns.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridAlignColumnsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAlignColumnsDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridAlignColumnsDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$1,\n      inputs: inputs$1\n    }]\n  }], null, null);\n})();\n/**\n * @param {?} align\n * @param {?} inline\n * @return {?}\n */\n\n\nfunction buildCss$1(align, inline) {\n  /** @type {?} */\n  var css = {};\n\n  var _align$split3 = align.split(' '),\n      _align$split4 = _slicedToArray(_align$split3, 2),\n      mainAxis = _align$split4[0],\n      crossAxis = _align$split4[1]; // Main axis\n\n\n  switch (mainAxis) {\n    case 'center':\n      css['align-content'] = 'center';\n      break;\n\n    case 'space-around':\n      css['align-content'] = 'space-around';\n      break;\n\n    case 'space-between':\n      css['align-content'] = 'space-between';\n      break;\n\n    case 'space-evenly':\n      css['align-content'] = 'space-evenly';\n      break;\n\n    case 'end':\n      css['align-content'] = 'end';\n      break;\n\n    case 'start':\n      css['align-content'] = 'start';\n      break;\n\n    case 'stretch':\n      css['align-content'] = 'stretch';\n      break;\n\n    default:\n      css['align-content'] = DEFAULT_MAIN; // default main axis\n\n      break;\n  } // Cross-axis\n\n\n  switch (crossAxis) {\n    case 'start':\n      css['align-items'] = 'start';\n      break;\n\n    case 'center':\n      css['align-items'] = 'center';\n      break;\n\n    case 'end':\n      css['align-items'] = 'end';\n      break;\n\n    case 'stretch':\n      css['align-items'] = 'stretch';\n      break;\n\n    default:\n      // 'stretch'\n      css['align-items'] = DEFAULT_CROSS; // default cross axis\n\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n  return css;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/align-rows/align-rows.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_MAIN$1 = 'start';\n/** @type {?} */\n\nvar DEFAULT_CROSS$1 = 'stretch';\n\nvar GridAlignRowsStyleBuilder = /*#__PURE__*/function (_StyleBuilder3) {\n  _inherits(GridAlignRowsStyleBuilder, _StyleBuilder3);\n\n  var _super7 = _createSuper(GridAlignRowsStyleBuilder);\n\n  function GridAlignRowsStyleBuilder() {\n    _classCallCheck(this, GridAlignRowsStyleBuilder);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(GridAlignRowsStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      return buildCss$2(input || \"\".concat(DEFAULT_MAIN$1, \" \").concat(DEFAULT_CROSS$1), parent.inline);\n    }\n  }]);\n\n  return GridAlignRowsStyleBuilder;\n}(StyleBuilder);\n\nGridAlignRowsStyleBuilder.ɵfac = function GridAlignRowsStyleBuilder_Factory(t) {\n  return ɵGridAlignRowsStyleBuilder_BaseFactory(t || GridAlignRowsStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridAlignRowsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridAlignRowsStyleBuilder_Factory() {\n    return new GridAlignRowsStyleBuilder();\n  },\n  token: GridAlignRowsStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridAlignRowsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAlignRowsStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAlignRowsStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridAlignRowsDirective = /*#__PURE__*/function (_BaseDirective3) {\n  _inherits(GridAlignRowsDirective, _BaseDirective3);\n\n  var _super8 = _createSuper(GridAlignRowsDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridAlignRowsDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this5;\n\n    _classCallCheck(this, GridAlignRowsDirective);\n\n    _this5 = _super8.call(this, elementRef, styleBuilder, styler, marshal);\n    _this5.DIRECTIVE_KEY = 'grid-align-rows';\n    _this5._inline = false;\n\n    _this5.init();\n\n    return _this5;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridAlignRowsDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? alignRowsInlineCache : alignRowsCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridAlignRowsDirective;\n}(BaseDirective2);\n\nGridAlignRowsDirective.ɵfac = function GridAlignRowsDirective_Factory(t) {\n  return new (t || GridAlignRowsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAlignRowsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridAlignRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridAlignRowsDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridAlignRowsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridAlignRowsStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridAlignRowsDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAlignRowsDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridAlignRowsStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar alignRowsCache = new Map();\n/** @type {?} */\n\nvar alignRowsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$2 = ['gdAlignRows', 'gdAlignRows.xs', 'gdAlignRows.sm', 'gdAlignRows.md', 'gdAlignRows.lg', 'gdAlignRows.xl', 'gdAlignRows.lt-sm', 'gdAlignRows.lt-md', 'gdAlignRows.lt-lg', 'gdAlignRows.lt-xl', 'gdAlignRows.gt-xs', 'gdAlignRows.gt-sm', 'gdAlignRows.gt-md', 'gdAlignRows.gt-lg'];\n/** @type {?} */\n\nvar selector$2 = \"\\n  [gdAlignRows],\\n  [gdAlignRows.xs], [gdAlignRows.sm], [gdAlignRows.md],\\n  [gdAlignRows.lg], [gdAlignRows.xl], [gdAlignRows.lt-sm],\\n  [gdAlignRows.lt-md], [gdAlignRows.lt-lg], [gdAlignRows.lt-xl],\\n  [gdAlignRows.gt-xs], [gdAlignRows.gt-sm], [gdAlignRows.gt-md],\\n  [gdAlignRows.gt-lg]\\n\";\n/**\n * 'row alignment' CSS Grid styling directive\n * Configures the alignment in the row direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20\n */\n\nvar DefaultGridAlignRowsDirective = /*#__PURE__*/function (_GridAlignRowsDirecti) {\n  _inherits(DefaultGridAlignRowsDirective, _GridAlignRowsDirecti);\n\n  var _super9 = _createSuper(DefaultGridAlignRowsDirective);\n\n  function DefaultGridAlignRowsDirective() {\n    var _this6;\n\n    _classCallCheck(this, DefaultGridAlignRowsDirective);\n\n    _this6 = _super9.apply(this, arguments);\n    _this6.inputs = inputs$2;\n    return _this6;\n  }\n\n  return DefaultGridAlignRowsDirective;\n}(GridAlignRowsDirective);\n\nDefaultGridAlignRowsDirective.ɵfac = function DefaultGridAlignRowsDirective_Factory(t) {\n  return ɵDefaultGridAlignRowsDirective_BaseFactory(t || DefaultGridAlignRowsDirective);\n};\n\nDefaultGridAlignRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridAlignRowsDirective,\n  selectors: [[\"\", \"gdAlignRows\", \"\"], [\"\", \"gdAlignRows.xs\", \"\"], [\"\", \"gdAlignRows.sm\", \"\"], [\"\", \"gdAlignRows.md\", \"\"], [\"\", \"gdAlignRows.lg\", \"\"], [\"\", \"gdAlignRows.xl\", \"\"], [\"\", \"gdAlignRows.lt-sm\", \"\"], [\"\", \"gdAlignRows.lt-md\", \"\"], [\"\", \"gdAlignRows.lt-lg\", \"\"], [\"\", \"gdAlignRows.lt-xl\", \"\"], [\"\", \"gdAlignRows.gt-xs\", \"\"], [\"\", \"gdAlignRows.gt-sm\", \"\"], [\"\", \"gdAlignRows.gt-md\", \"\"], [\"\", \"gdAlignRows.gt-lg\", \"\"]],\n  inputs: {\n    gdAlignRows: \"gdAlignRows\",\n    \"gdAlignRows.xs\": \"gdAlignRows.xs\",\n    \"gdAlignRows.sm\": \"gdAlignRows.sm\",\n    \"gdAlignRows.md\": \"gdAlignRows.md\",\n    \"gdAlignRows.lg\": \"gdAlignRows.lg\",\n    \"gdAlignRows.xl\": \"gdAlignRows.xl\",\n    \"gdAlignRows.lt-sm\": \"gdAlignRows.lt-sm\",\n    \"gdAlignRows.lt-md\": \"gdAlignRows.lt-md\",\n    \"gdAlignRows.lt-lg\": \"gdAlignRows.lt-lg\",\n    \"gdAlignRows.lt-xl\": \"gdAlignRows.lt-xl\",\n    \"gdAlignRows.gt-xs\": \"gdAlignRows.gt-xs\",\n    \"gdAlignRows.gt-sm\": \"gdAlignRows.gt-sm\",\n    \"gdAlignRows.gt-md\": \"gdAlignRows.gt-md\",\n    \"gdAlignRows.gt-lg\": \"gdAlignRows.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridAlignRowsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAlignRowsDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridAlignRowsDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$2,\n      inputs: inputs$2\n    }]\n  }], null, null);\n})();\n/**\n * @param {?} align\n * @param {?} inline\n * @return {?}\n */\n\n\nfunction buildCss$2(align, inline) {\n  /** @type {?} */\n  var css = {};\n\n  var _align$split5 = align.split(' '),\n      _align$split6 = _slicedToArray(_align$split5, 2),\n      mainAxis = _align$split6[0],\n      crossAxis = _align$split6[1]; // Main axis\n\n\n  switch (mainAxis) {\n    case 'center':\n    case 'space-around':\n    case 'space-between':\n    case 'space-evenly':\n    case 'end':\n    case 'start':\n    case 'stretch':\n      css['justify-content'] = mainAxis;\n      break;\n\n    default:\n      css['justify-content'] = DEFAULT_MAIN$1; // default main axis\n\n      break;\n  } // Cross-axis\n\n\n  switch (crossAxis) {\n    case 'start':\n    case 'center':\n    case 'end':\n    case 'stretch':\n      css['justify-items'] = crossAxis;\n      break;\n\n    default:\n      // 'stretch'\n      css['justify-items'] = DEFAULT_CROSS$1; // default cross axis\n\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n  return css;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/area/area.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE = 'auto';\n\nvar GridAreaStyleBuilder = /*#__PURE__*/function (_StyleBuilder4) {\n  _inherits(GridAreaStyleBuilder, _StyleBuilder4);\n\n  var _super10 = _createSuper(GridAreaStyleBuilder);\n\n  function GridAreaStyleBuilder() {\n    _classCallCheck(this, GridAreaStyleBuilder);\n\n    return _super10.apply(this, arguments);\n  }\n\n  _createClass(GridAreaStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function buildStyles(input) {\n      return {\n        'grid-area': input || DEFAULT_VALUE\n      };\n    }\n  }]);\n\n  return GridAreaStyleBuilder;\n}(StyleBuilder);\n\nGridAreaStyleBuilder.ɵfac = function GridAreaStyleBuilder_Factory(t) {\n  return ɵGridAreaStyleBuilder_BaseFactory(t || GridAreaStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridAreaStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridAreaStyleBuilder_Factory() {\n    return new GridAreaStyleBuilder();\n  },\n  token: GridAreaStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridAreaStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAreaStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAreaStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridAreaDirective = /*#__PURE__*/function (_BaseDirective4) {\n  _inherits(GridAreaDirective, _BaseDirective4);\n\n  var _super11 = _createSuper(GridAreaDirective);\n\n  /**\n   * @param {?} elRef\n   * @param {?} styleUtils\n   * @param {?} styleBuilder\n   * @param {?} marshal\n   */\n  function GridAreaDirective(elRef, styleUtils, styleBuilder, marshal) {\n    var _this7;\n\n    _classCallCheck(this, GridAreaDirective);\n\n    _this7 = _super11.call(this, elRef, styleBuilder, styleUtils, marshal);\n    _this7.DIRECTIVE_KEY = 'grid-area';\n    _this7.styleCache = gridAreaCache;\n\n    _this7.init();\n\n    return _this7;\n  }\n\n  return GridAreaDirective;\n}(BaseDirective2);\n\nGridAreaDirective.ɵfac = function GridAreaDirective_Factory(t) {\n  return new (t || GridAreaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(GridAreaStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridAreaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridAreaDirective,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridAreaDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: StyleUtils\n  }, {\n    type: GridAreaStyleBuilder\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAreaDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: GridAreaStyleBuilder\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, null);\n})();\n/** @type {?} */\n\n\nvar gridAreaCache = new Map();\n/** @type {?} */\n\nvar inputs$3 = ['gdArea', 'gdArea.xs', 'gdArea.sm', 'gdArea.md', 'gdArea.lg', 'gdArea.xl', 'gdArea.lt-sm', 'gdArea.lt-md', 'gdArea.lt-lg', 'gdArea.lt-xl', 'gdArea.gt-xs', 'gdArea.gt-sm', 'gdArea.gt-md', 'gdArea.gt-lg'];\n/** @type {?} */\n\nvar selector$3 = \"\\n  [gdArea],\\n  [gdArea.xs], [gdArea.sm], [gdArea.md], [gdArea.lg], [gdArea.xl],\\n  [gdArea.lt-sm], [gdArea.lt-md], [gdArea.lt-lg], [gdArea.lt-xl],\\n  [gdArea.gt-xs], [gdArea.gt-sm], [gdArea.gt-md], [gdArea.gt-lg]\\n\";\n/**\n * 'grid-area' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27\n */\n\nvar DefaultGridAreaDirective = /*#__PURE__*/function (_GridAreaDirective) {\n  _inherits(DefaultGridAreaDirective, _GridAreaDirective);\n\n  var _super12 = _createSuper(DefaultGridAreaDirective);\n\n  function DefaultGridAreaDirective() {\n    var _this8;\n\n    _classCallCheck(this, DefaultGridAreaDirective);\n\n    _this8 = _super12.apply(this, arguments);\n    _this8.inputs = inputs$3;\n    return _this8;\n  }\n\n  return DefaultGridAreaDirective;\n}(GridAreaDirective);\n\nDefaultGridAreaDirective.ɵfac = function DefaultGridAreaDirective_Factory(t) {\n  return ɵDefaultGridAreaDirective_BaseFactory(t || DefaultGridAreaDirective);\n};\n\nDefaultGridAreaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridAreaDirective,\n  selectors: [[\"\", \"gdArea\", \"\"], [\"\", \"gdArea.xs\", \"\"], [\"\", \"gdArea.sm\", \"\"], [\"\", \"gdArea.md\", \"\"], [\"\", \"gdArea.lg\", \"\"], [\"\", \"gdArea.xl\", \"\"], [\"\", \"gdArea.lt-sm\", \"\"], [\"\", \"gdArea.lt-md\", \"\"], [\"\", \"gdArea.lt-lg\", \"\"], [\"\", \"gdArea.lt-xl\", \"\"], [\"\", \"gdArea.gt-xs\", \"\"], [\"\", \"gdArea.gt-sm\", \"\"], [\"\", \"gdArea.gt-md\", \"\"], [\"\", \"gdArea.gt-lg\", \"\"]],\n  inputs: {\n    gdArea: \"gdArea\",\n    \"gdArea.xs\": \"gdArea.xs\",\n    \"gdArea.sm\": \"gdArea.sm\",\n    \"gdArea.md\": \"gdArea.md\",\n    \"gdArea.lg\": \"gdArea.lg\",\n    \"gdArea.xl\": \"gdArea.xl\",\n    \"gdArea.lt-sm\": \"gdArea.lt-sm\",\n    \"gdArea.lt-md\": \"gdArea.lt-md\",\n    \"gdArea.lt-lg\": \"gdArea.lt-lg\",\n    \"gdArea.lt-xl\": \"gdArea.lt-xl\",\n    \"gdArea.gt-xs\": \"gdArea.gt-xs\",\n    \"gdArea.gt-sm\": \"gdArea.gt-sm\",\n    \"gdArea.gt-md\": \"gdArea.gt-md\",\n    \"gdArea.gt-lg\": \"gdArea.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridAreaDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAreaDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridAreaDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$3,\n      inputs: inputs$3\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/areas/areas.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$1 = 'none';\n/** @type {?} */\n\nvar DELIMETER = '|';\n\nvar GridAreasStyleBuiler = /*#__PURE__*/function (_StyleBuilder5) {\n  _inherits(GridAreasStyleBuiler, _StyleBuilder5);\n\n  var _super13 = _createSuper(GridAreasStyleBuiler);\n\n  function GridAreasStyleBuiler() {\n    _classCallCheck(this, GridAreasStyleBuiler);\n\n    return _super13.apply(this, arguments);\n  }\n\n  _createClass(GridAreasStyleBuiler, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      /** @type {?} */\n      var areas = (input || DEFAULT_VALUE$1).split(DELIMETER).map(\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {\n        return \"\\\"\".concat(v.trim(), \"\\\"\");\n      });\n      return {\n        'display': parent.inline ? 'inline-grid' : 'grid',\n        'grid-template-areas': areas.join(' ')\n      };\n    }\n  }]);\n\n  return GridAreasStyleBuiler;\n}(StyleBuilder);\n\nGridAreasStyleBuiler.ɵfac = function GridAreasStyleBuiler_Factory(t) {\n  return ɵGridAreasStyleBuiler_BaseFactory(t || GridAreasStyleBuiler);\n};\n/** @nocollapse */\n\n\nGridAreasStyleBuiler.ɵprov = ɵɵdefineInjectable({\n  factory: function GridAreasStyleBuiler_Factory() {\n    return new GridAreasStyleBuiler();\n  },\n  token: GridAreasStyleBuiler,\n  providedIn: \"root\"\n});\nvar ɵGridAreasStyleBuiler_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAreasStyleBuiler);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAreasStyleBuiler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridAreasDirective = /*#__PURE__*/function (_BaseDirective5) {\n  _inherits(GridAreasDirective, _BaseDirective5);\n\n  var _super14 = _createSuper(GridAreasDirective);\n\n  /**\n   * @param {?} elRef\n   * @param {?} styleUtils\n   * @param {?} styleBuilder\n   * @param {?} marshal\n   */\n  function GridAreasDirective(elRef, styleUtils, styleBuilder, marshal) {\n    var _this9;\n\n    _classCallCheck(this, GridAreasDirective);\n\n    _this9 = _super14.call(this, elRef, styleBuilder, styleUtils, marshal);\n    _this9.DIRECTIVE_KEY = 'grid-areas';\n    _this9._inline = false;\n\n    _this9.init();\n\n    return _this9;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridAreasDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? areasInlineCache : areasCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridAreasDirective;\n}(BaseDirective2);\n\nGridAreasDirective.ɵfac = function GridAreasDirective_Factory(t) {\n  return new (t || GridAreasDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(GridAreasStyleBuiler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridAreasDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridAreasDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridAreasDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: StyleUtils\n  }, {\n    type: GridAreasStyleBuiler\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridAreasDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAreasDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: GridAreasStyleBuiler\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar areasCache = new Map();\n/** @type {?} */\n\nvar areasInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$4 = ['gdAreas', 'gdAreas.xs', 'gdAreas.sm', 'gdAreas.md', 'gdAreas.lg', 'gdAreas.xl', 'gdAreas.lt-sm', 'gdAreas.lt-md', 'gdAreas.lt-lg', 'gdAreas.lt-xl', 'gdAreas.gt-xs', 'gdAreas.gt-sm', 'gdAreas.gt-md', 'gdAreas.gt-lg'];\n/** @type {?} */\n\nvar selector$4 = \"\\n  [gdAreas],\\n  [gdAreas.xs], [gdAreas.sm], [gdAreas.md], [gdAreas.lg], [gdAreas.xl],\\n  [gdAreas.lt-sm], [gdAreas.lt-md], [gdAreas.lt-lg], [gdAreas.lt-xl],\\n  [gdAreas.gt-xs], [gdAreas.gt-sm], [gdAreas.gt-md], [gdAreas.gt-lg]\\n\";\n/**\n * 'grid-template-areas' CSS Grid styling directive\n * Configures the names of elements within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14\n */\n\nvar DefaultGridAreasDirective = /*#__PURE__*/function (_GridAreasDirective) {\n  _inherits(DefaultGridAreasDirective, _GridAreasDirective);\n\n  var _super15 = _createSuper(DefaultGridAreasDirective);\n\n  function DefaultGridAreasDirective() {\n    var _this10;\n\n    _classCallCheck(this, DefaultGridAreasDirective);\n\n    _this10 = _super15.apply(this, arguments);\n    _this10.inputs = inputs$4;\n    return _this10;\n  }\n\n  return DefaultGridAreasDirective;\n}(GridAreasDirective);\n\nDefaultGridAreasDirective.ɵfac = function DefaultGridAreasDirective_Factory(t) {\n  return ɵDefaultGridAreasDirective_BaseFactory(t || DefaultGridAreasDirective);\n};\n\nDefaultGridAreasDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridAreasDirective,\n  selectors: [[\"\", \"gdAreas\", \"\"], [\"\", \"gdAreas.xs\", \"\"], [\"\", \"gdAreas.sm\", \"\"], [\"\", \"gdAreas.md\", \"\"], [\"\", \"gdAreas.lg\", \"\"], [\"\", \"gdAreas.xl\", \"\"], [\"\", \"gdAreas.lt-sm\", \"\"], [\"\", \"gdAreas.lt-md\", \"\"], [\"\", \"gdAreas.lt-lg\", \"\"], [\"\", \"gdAreas.lt-xl\", \"\"], [\"\", \"gdAreas.gt-xs\", \"\"], [\"\", \"gdAreas.gt-sm\", \"\"], [\"\", \"gdAreas.gt-md\", \"\"], [\"\", \"gdAreas.gt-lg\", \"\"]],\n  inputs: {\n    gdAreas: \"gdAreas\",\n    \"gdAreas.xs\": \"gdAreas.xs\",\n    \"gdAreas.sm\": \"gdAreas.sm\",\n    \"gdAreas.md\": \"gdAreas.md\",\n    \"gdAreas.lg\": \"gdAreas.lg\",\n    \"gdAreas.xl\": \"gdAreas.xl\",\n    \"gdAreas.lt-sm\": \"gdAreas.lt-sm\",\n    \"gdAreas.lt-md\": \"gdAreas.lt-md\",\n    \"gdAreas.lt-lg\": \"gdAreas.lt-lg\",\n    \"gdAreas.lt-xl\": \"gdAreas.lt-xl\",\n    \"gdAreas.gt-xs\": \"gdAreas.gt-xs\",\n    \"gdAreas.gt-sm\": \"gdAreas.gt-sm\",\n    \"gdAreas.gt-md\": \"gdAreas.gt-md\",\n    \"gdAreas.gt-lg\": \"gdAreas.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridAreasDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAreasDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridAreasDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$4,\n      inputs: inputs$4\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/auto/auto.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$2 = 'initial';\n\nvar GridAutoStyleBuilder = /*#__PURE__*/function (_StyleBuilder6) {\n  _inherits(GridAutoStyleBuilder, _StyleBuilder6);\n\n  var _super16 = _createSuper(GridAutoStyleBuilder);\n\n  function GridAutoStyleBuilder() {\n    _classCallCheck(this, GridAutoStyleBuilder);\n\n    return _super16.apply(this, arguments);\n  }\n\n  _createClass(GridAutoStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      var _split = (input || DEFAULT_VALUE$2).split(' '),\n          _split2 = _slicedToArray(_split, 2),\n          direction = _split2[0],\n          dense = _split2[1];\n\n      if (direction !== 'column' && direction !== 'row' && direction !== 'dense') {\n        direction = 'row';\n      }\n\n      dense = dense === 'dense' && direction !== 'dense' ? ' dense' : '';\n      return {\n        'display': parent.inline ? 'inline-grid' : 'grid',\n        'grid-auto-flow': direction + dense\n      };\n    }\n  }]);\n\n  return GridAutoStyleBuilder;\n}(StyleBuilder);\n\nGridAutoStyleBuilder.ɵfac = function GridAutoStyleBuilder_Factory(t) {\n  return ɵGridAutoStyleBuilder_BaseFactory(t || GridAutoStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridAutoStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridAutoStyleBuilder_Factory() {\n    return new GridAutoStyleBuilder();\n  },\n  token: GridAutoStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridAutoStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAutoStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAutoStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridAutoDirective = /*#__PURE__*/function (_BaseDirective6) {\n  _inherits(GridAutoDirective, _BaseDirective6);\n\n  var _super17 = _createSuper(GridAutoDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridAutoDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this11;\n\n    _classCallCheck(this, GridAutoDirective);\n\n    _this11 = _super17.call(this, elementRef, styleBuilder, styler, marshal);\n    _this11._inline = false;\n    _this11.DIRECTIVE_KEY = 'grid-auto';\n\n    _this11.init();\n\n    return _this11;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridAutoDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? autoInlineCache : autoCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridAutoDirective;\n}(BaseDirective2);\n\nGridAutoDirective.ɵfac = function GridAutoDirective_Factory(t) {\n  return new (t || GridAutoDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAutoStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridAutoDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridAutoDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridAutoDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridAutoStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridAutoDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridAutoDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridAutoStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar autoCache = new Map();\n/** @type {?} */\n\nvar autoInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$5 = ['gdAuto', 'gdAuto.xs', 'gdAuto.sm', 'gdAuto.md', 'gdAuto.lg', 'gdAuto.xl', 'gdAuto.lt-sm', 'gdAuto.lt-md', 'gdAuto.lt-lg', 'gdAuto.lt-xl', 'gdAuto.gt-xs', 'gdAuto.gt-sm', 'gdAuto.gt-md', 'gdAuto.gt-lg'];\n/** @type {?} */\n\nvar selector$5 = \"\\n  [gdAuto],\\n  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],\\n  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],\\n  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]\\n\";\n/**\n * 'grid-auto-flow' CSS Grid styling directive\n * Configures the auto placement algorithm for the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23\n */\n\nvar DefaultGridAutoDirective = /*#__PURE__*/function (_GridAutoDirective) {\n  _inherits(DefaultGridAutoDirective, _GridAutoDirective);\n\n  var _super18 = _createSuper(DefaultGridAutoDirective);\n\n  function DefaultGridAutoDirective() {\n    var _this12;\n\n    _classCallCheck(this, DefaultGridAutoDirective);\n\n    _this12 = _super18.apply(this, arguments);\n    _this12.inputs = inputs$5;\n    return _this12;\n  }\n\n  return DefaultGridAutoDirective;\n}(GridAutoDirective);\n\nDefaultGridAutoDirective.ɵfac = function DefaultGridAutoDirective_Factory(t) {\n  return ɵDefaultGridAutoDirective_BaseFactory(t || DefaultGridAutoDirective);\n};\n\nDefaultGridAutoDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridAutoDirective,\n  selectors: [[\"\", \"gdAuto\", \"\"], [\"\", \"gdAuto.xs\", \"\"], [\"\", \"gdAuto.sm\", \"\"], [\"\", \"gdAuto.md\", \"\"], [\"\", \"gdAuto.lg\", \"\"], [\"\", \"gdAuto.xl\", \"\"], [\"\", \"gdAuto.lt-sm\", \"\"], [\"\", \"gdAuto.lt-md\", \"\"], [\"\", \"gdAuto.lt-lg\", \"\"], [\"\", \"gdAuto.lt-xl\", \"\"], [\"\", \"gdAuto.gt-xs\", \"\"], [\"\", \"gdAuto.gt-sm\", \"\"], [\"\", \"gdAuto.gt-md\", \"\"], [\"\", \"gdAuto.gt-lg\", \"\"]],\n  inputs: {\n    gdAuto: \"gdAuto\",\n    \"gdAuto.xs\": \"gdAuto.xs\",\n    \"gdAuto.sm\": \"gdAuto.sm\",\n    \"gdAuto.md\": \"gdAuto.md\",\n    \"gdAuto.lg\": \"gdAuto.lg\",\n    \"gdAuto.xl\": \"gdAuto.xl\",\n    \"gdAuto.lt-sm\": \"gdAuto.lt-sm\",\n    \"gdAuto.lt-md\": \"gdAuto.lt-md\",\n    \"gdAuto.lt-lg\": \"gdAuto.lt-lg\",\n    \"gdAuto.lt-xl\": \"gdAuto.lt-xl\",\n    \"gdAuto.gt-xs\": \"gdAuto.gt-xs\",\n    \"gdAuto.gt-sm\": \"gdAuto.gt-sm\",\n    \"gdAuto.gt-md\": \"gdAuto.gt-md\",\n    \"gdAuto.gt-lg\": \"gdAuto.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridAutoDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAutoDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridAutoDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$5,\n      inputs: inputs$5\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/column/column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$3 = 'auto';\n\nvar GridColumnStyleBuilder = /*#__PURE__*/function (_StyleBuilder7) {\n  _inherits(GridColumnStyleBuilder, _StyleBuilder7);\n\n  var _super19 = _createSuper(GridColumnStyleBuilder);\n\n  function GridColumnStyleBuilder() {\n    _classCallCheck(this, GridColumnStyleBuilder);\n\n    return _super19.apply(this, arguments);\n  }\n\n  _createClass(GridColumnStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function buildStyles(input) {\n      return {\n        'grid-column': input || DEFAULT_VALUE$3\n      };\n    }\n  }]);\n\n  return GridColumnStyleBuilder;\n}(StyleBuilder);\n\nGridColumnStyleBuilder.ɵfac = function GridColumnStyleBuilder_Factory(t) {\n  return ɵGridColumnStyleBuilder_BaseFactory(t || GridColumnStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridColumnStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridColumnStyleBuilder_Factory() {\n    return new GridColumnStyleBuilder();\n  },\n  token: GridColumnStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridColumnStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridColumnStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridColumnStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridColumnDirective = /*#__PURE__*/function (_BaseDirective7) {\n  _inherits(GridColumnDirective, _BaseDirective7);\n\n  var _super20 = _createSuper(GridColumnDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridColumnDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this13;\n\n    _classCallCheck(this, GridColumnDirective);\n\n    _this13 = _super20.call(this, elementRef, styleBuilder, styler, marshal);\n    _this13.DIRECTIVE_KEY = 'grid-column';\n    _this13.styleCache = columnCache;\n\n    _this13.init();\n\n    return _this13;\n  }\n\n  return GridColumnDirective;\n}(BaseDirective2);\n\nGridColumnDirective.ɵfac = function GridColumnDirective_Factory(t) {\n  return new (t || GridColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridColumnStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridColumnDirective,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridColumnDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridColumnStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridColumnDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridColumnStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, null);\n})();\n/** @type {?} */\n\n\nvar columnCache = new Map();\n/** @type {?} */\n\nvar inputs$6 = ['gdColumn', 'gdColumn.xs', 'gdColumn.sm', 'gdColumn.md', 'gdColumn.lg', 'gdColumn.xl', 'gdColumn.lt-sm', 'gdColumn.lt-md', 'gdColumn.lt-lg', 'gdColumn.lt-xl', 'gdColumn.gt-xs', 'gdColumn.gt-sm', 'gdColumn.gt-md', 'gdColumn.gt-lg'];\n/** @type {?} */\n\nvar selector$6 = \"\\n  [gdColumn],\\n  [gdColumn.xs], [gdColumn.sm], [gdColumn.md], [gdColumn.lg], [gdColumn.xl],\\n  [gdColumn.lt-sm], [gdColumn.lt-md], [gdColumn.lt-lg], [gdColumn.lt-xl],\\n  [gdColumn.gt-xs], [gdColumn.gt-sm], [gdColumn.gt-md], [gdColumn.gt-lg]\\n\";\n/**\n * 'grid-column' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n\nvar DefaultGridColumnDirective = /*#__PURE__*/function (_GridColumnDirective) {\n  _inherits(DefaultGridColumnDirective, _GridColumnDirective);\n\n  var _super21 = _createSuper(DefaultGridColumnDirective);\n\n  function DefaultGridColumnDirective() {\n    var _this14;\n\n    _classCallCheck(this, DefaultGridColumnDirective);\n\n    _this14 = _super21.apply(this, arguments);\n    _this14.inputs = inputs$6;\n    return _this14;\n  }\n\n  return DefaultGridColumnDirective;\n}(GridColumnDirective);\n\nDefaultGridColumnDirective.ɵfac = function DefaultGridColumnDirective_Factory(t) {\n  return ɵDefaultGridColumnDirective_BaseFactory(t || DefaultGridColumnDirective);\n};\n\nDefaultGridColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridColumnDirective,\n  selectors: [[\"\", \"gdColumn\", \"\"], [\"\", \"gdColumn.xs\", \"\"], [\"\", \"gdColumn.sm\", \"\"], [\"\", \"gdColumn.md\", \"\"], [\"\", \"gdColumn.lg\", \"\"], [\"\", \"gdColumn.xl\", \"\"], [\"\", \"gdColumn.lt-sm\", \"\"], [\"\", \"gdColumn.lt-md\", \"\"], [\"\", \"gdColumn.lt-lg\", \"\"], [\"\", \"gdColumn.lt-xl\", \"\"], [\"\", \"gdColumn.gt-xs\", \"\"], [\"\", \"gdColumn.gt-sm\", \"\"], [\"\", \"gdColumn.gt-md\", \"\"], [\"\", \"gdColumn.gt-lg\", \"\"]],\n  inputs: {\n    gdColumn: \"gdColumn\",\n    \"gdColumn.xs\": \"gdColumn.xs\",\n    \"gdColumn.sm\": \"gdColumn.sm\",\n    \"gdColumn.md\": \"gdColumn.md\",\n    \"gdColumn.lg\": \"gdColumn.lg\",\n    \"gdColumn.xl\": \"gdColumn.xl\",\n    \"gdColumn.lt-sm\": \"gdColumn.lt-sm\",\n    \"gdColumn.lt-md\": \"gdColumn.lt-md\",\n    \"gdColumn.lt-lg\": \"gdColumn.lt-lg\",\n    \"gdColumn.lt-xl\": \"gdColumn.lt-xl\",\n    \"gdColumn.gt-xs\": \"gdColumn.gt-xs\",\n    \"gdColumn.gt-sm\": \"gdColumn.gt-sm\",\n    \"gdColumn.gt-md\": \"gdColumn.gt-md\",\n    \"gdColumn.gt-lg\": \"gdColumn.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridColumnDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridColumnDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridColumnDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$6,\n      inputs: inputs$6\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/columns/columns.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$4 = 'none';\n/** @type {?} */\n\nvar AUTO_SPECIFIER = '!';\n\nvar GridColumnsStyleBuilder = /*#__PURE__*/function (_StyleBuilder8) {\n  _inherits(GridColumnsStyleBuilder, _StyleBuilder8);\n\n  var _super22 = _createSuper(GridColumnsStyleBuilder);\n\n  function GridColumnsStyleBuilder() {\n    _classCallCheck(this, GridColumnsStyleBuilder);\n\n    return _super22.apply(this, arguments);\n  }\n\n  _createClass(GridColumnsStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      input = input || DEFAULT_VALUE$4;\n      /** @type {?} */\n\n      var auto = false;\n\n      if (input.endsWith(AUTO_SPECIFIER)) {\n        input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n        auto = true;\n      }\n      /** @type {?} */\n\n\n      var css = {\n        'display': parent.inline ? 'inline-grid' : 'grid',\n        'grid-auto-columns': '',\n        'grid-template-columns': ''\n      };\n      /** @type {?} */\n\n      var key = auto ? 'grid-auto-columns' : 'grid-template-columns';\n      css[key] = input;\n      return css;\n    }\n  }]);\n\n  return GridColumnsStyleBuilder;\n}(StyleBuilder);\n\nGridColumnsStyleBuilder.ɵfac = function GridColumnsStyleBuilder_Factory(t) {\n  return ɵGridColumnsStyleBuilder_BaseFactory(t || GridColumnsStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridColumnsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridColumnsStyleBuilder_Factory() {\n    return new GridColumnsStyleBuilder();\n  },\n  token: GridColumnsStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridColumnsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridColumnsStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridColumnsStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridColumnsDirective = /*#__PURE__*/function (_BaseDirective8) {\n  _inherits(GridColumnsDirective, _BaseDirective8);\n\n  var _super23 = _createSuper(GridColumnsDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridColumnsDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this15;\n\n    _classCallCheck(this, GridColumnsDirective);\n\n    _this15 = _super23.call(this, elementRef, styleBuilder, styler, marshal);\n    _this15.DIRECTIVE_KEY = 'grid-columns';\n    _this15._inline = false;\n\n    _this15.init();\n\n    return _this15;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridColumnsDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? columnsInlineCache : columnsCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridColumnsDirective;\n}(BaseDirective2);\n\nGridColumnsDirective.ɵfac = function GridColumnsDirective_Factory(t) {\n  return new (t || GridColumnsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridColumnsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridColumnsDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridColumnsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridColumnsStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridColumnsDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridColumnsDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridColumnsStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar columnsCache = new Map();\n/** @type {?} */\n\nvar columnsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$7 = ['gdColumns', 'gdColumns.xs', 'gdColumns.sm', 'gdColumns.md', 'gdColumns.lg', 'gdColumns.xl', 'gdColumns.lt-sm', 'gdColumns.lt-md', 'gdColumns.lt-lg', 'gdColumns.lt-xl', 'gdColumns.gt-xs', 'gdColumns.gt-sm', 'gdColumns.gt-md', 'gdColumns.gt-lg'];\n/** @type {?} */\n\nvar selector$7 = \"\\n  [gdColumns],\\n  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],\\n  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],\\n  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]\\n\";\n/**\n * 'grid-template-columns' CSS Grid styling directive\n * Configures the sizing for the columns in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n\nvar DefaultGridColumnsDirective = /*#__PURE__*/function (_GridColumnsDirective) {\n  _inherits(DefaultGridColumnsDirective, _GridColumnsDirective);\n\n  var _super24 = _createSuper(DefaultGridColumnsDirective);\n\n  function DefaultGridColumnsDirective() {\n    var _this16;\n\n    _classCallCheck(this, DefaultGridColumnsDirective);\n\n    _this16 = _super24.apply(this, arguments);\n    _this16.inputs = inputs$7;\n    return _this16;\n  }\n\n  return DefaultGridColumnsDirective;\n}(GridColumnsDirective);\n\nDefaultGridColumnsDirective.ɵfac = function DefaultGridColumnsDirective_Factory(t) {\n  return ɵDefaultGridColumnsDirective_BaseFactory(t || DefaultGridColumnsDirective);\n};\n\nDefaultGridColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridColumnsDirective,\n  selectors: [[\"\", \"gdColumns\", \"\"], [\"\", \"gdColumns.xs\", \"\"], [\"\", \"gdColumns.sm\", \"\"], [\"\", \"gdColumns.md\", \"\"], [\"\", \"gdColumns.lg\", \"\"], [\"\", \"gdColumns.xl\", \"\"], [\"\", \"gdColumns.lt-sm\", \"\"], [\"\", \"gdColumns.lt-md\", \"\"], [\"\", \"gdColumns.lt-lg\", \"\"], [\"\", \"gdColumns.lt-xl\", \"\"], [\"\", \"gdColumns.gt-xs\", \"\"], [\"\", \"gdColumns.gt-sm\", \"\"], [\"\", \"gdColumns.gt-md\", \"\"], [\"\", \"gdColumns.gt-lg\", \"\"]],\n  inputs: {\n    gdColumns: \"gdColumns\",\n    \"gdColumns.xs\": \"gdColumns.xs\",\n    \"gdColumns.sm\": \"gdColumns.sm\",\n    \"gdColumns.md\": \"gdColumns.md\",\n    \"gdColumns.lg\": \"gdColumns.lg\",\n    \"gdColumns.xl\": \"gdColumns.xl\",\n    \"gdColumns.lt-sm\": \"gdColumns.lt-sm\",\n    \"gdColumns.lt-md\": \"gdColumns.lt-md\",\n    \"gdColumns.lt-lg\": \"gdColumns.lt-lg\",\n    \"gdColumns.lt-xl\": \"gdColumns.lt-xl\",\n    \"gdColumns.gt-xs\": \"gdColumns.gt-xs\",\n    \"gdColumns.gt-sm\": \"gdColumns.gt-sm\",\n    \"gdColumns.gt-md\": \"gdColumns.gt-md\",\n    \"gdColumns.gt-lg\": \"gdColumns.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridColumnsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridColumnsDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridColumnsDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$7,\n      inputs: inputs$7\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/gap/gap.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$5 = '0';\n\nvar GridGapStyleBuilder = /*#__PURE__*/function (_StyleBuilder9) {\n  _inherits(GridGapStyleBuilder, _StyleBuilder9);\n\n  var _super25 = _createSuper(GridGapStyleBuilder);\n\n  function GridGapStyleBuilder() {\n    _classCallCheck(this, GridGapStyleBuilder);\n\n    return _super25.apply(this, arguments);\n  }\n\n  _createClass(GridGapStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      return {\n        'display': parent.inline ? 'inline-grid' : 'grid',\n        'grid-gap': input || DEFAULT_VALUE$5\n      };\n    }\n  }]);\n\n  return GridGapStyleBuilder;\n}(StyleBuilder);\n\nGridGapStyleBuilder.ɵfac = function GridGapStyleBuilder_Factory(t) {\n  return ɵGridGapStyleBuilder_BaseFactory(t || GridGapStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridGapStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridGapStyleBuilder_Factory() {\n    return new GridGapStyleBuilder();\n  },\n  token: GridGapStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridGapStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridGapStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridGapStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridGapDirective = /*#__PURE__*/function (_BaseDirective9) {\n  _inherits(GridGapDirective, _BaseDirective9);\n\n  var _super26 = _createSuper(GridGapDirective);\n\n  /**\n   * @param {?} elRef\n   * @param {?} styleUtils\n   * @param {?} styleBuilder\n   * @param {?} marshal\n   */\n  function GridGapDirective(elRef, styleUtils, styleBuilder, marshal) {\n    var _this17;\n\n    _classCallCheck(this, GridGapDirective);\n\n    _this17 = _super26.call(this, elRef, styleBuilder, styleUtils, marshal);\n    _this17.DIRECTIVE_KEY = 'grid-gap';\n    _this17._inline = false;\n\n    _this17.init();\n\n    return _this17;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridGapDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? gapInlineCache : gapCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridGapDirective;\n}(BaseDirective2);\n\nGridGapDirective.ɵfac = function GridGapDirective_Factory(t) {\n  return new (t || GridGapDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(GridGapStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridGapDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridGapDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridGapDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: StyleUtils\n  }, {\n    type: GridGapStyleBuilder\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridGapDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridGapDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: GridGapStyleBuilder\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar gapCache = new Map();\n/** @type {?} */\n\nvar gapInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$8 = ['gdGap', 'gdGap.xs', 'gdGap.sm', 'gdGap.md', 'gdGap.lg', 'gdGap.xl', 'gdGap.lt-sm', 'gdGap.lt-md', 'gdGap.lt-lg', 'gdGap.lt-xl', 'gdGap.gt-xs', 'gdGap.gt-sm', 'gdGap.gt-md', 'gdGap.gt-lg'];\n/** @type {?} */\n\nvar selector$8 = \"\\n  [gdGap],\\n  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],\\n  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],\\n  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]\\n\";\n/**\n * 'grid-gap' CSS Grid styling directive\n * Configures the gap between items in the grid\n * Syntax: <row gap> [<column-gap>]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17\n */\n\nvar DefaultGridGapDirective = /*#__PURE__*/function (_GridGapDirective) {\n  _inherits(DefaultGridGapDirective, _GridGapDirective);\n\n  var _super27 = _createSuper(DefaultGridGapDirective);\n\n  function DefaultGridGapDirective() {\n    var _this18;\n\n    _classCallCheck(this, DefaultGridGapDirective);\n\n    _this18 = _super27.apply(this, arguments);\n    _this18.inputs = inputs$8;\n    return _this18;\n  }\n\n  return DefaultGridGapDirective;\n}(GridGapDirective);\n\nDefaultGridGapDirective.ɵfac = function DefaultGridGapDirective_Factory(t) {\n  return ɵDefaultGridGapDirective_BaseFactory(t || DefaultGridGapDirective);\n};\n\nDefaultGridGapDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridGapDirective,\n  selectors: [[\"\", \"gdGap\", \"\"], [\"\", \"gdGap.xs\", \"\"], [\"\", \"gdGap.sm\", \"\"], [\"\", \"gdGap.md\", \"\"], [\"\", \"gdGap.lg\", \"\"], [\"\", \"gdGap.xl\", \"\"], [\"\", \"gdGap.lt-sm\", \"\"], [\"\", \"gdGap.lt-md\", \"\"], [\"\", \"gdGap.lt-lg\", \"\"], [\"\", \"gdGap.lt-xl\", \"\"], [\"\", \"gdGap.gt-xs\", \"\"], [\"\", \"gdGap.gt-sm\", \"\"], [\"\", \"gdGap.gt-md\", \"\"], [\"\", \"gdGap.gt-lg\", \"\"]],\n  inputs: {\n    gdGap: \"gdGap\",\n    \"gdGap.xs\": \"gdGap.xs\",\n    \"gdGap.sm\": \"gdGap.sm\",\n    \"gdGap.md\": \"gdGap.md\",\n    \"gdGap.lg\": \"gdGap.lg\",\n    \"gdGap.xl\": \"gdGap.xl\",\n    \"gdGap.lt-sm\": \"gdGap.lt-sm\",\n    \"gdGap.lt-md\": \"gdGap.lt-md\",\n    \"gdGap.lt-lg\": \"gdGap.lt-lg\",\n    \"gdGap.lt-xl\": \"gdGap.lt-xl\",\n    \"gdGap.gt-xs\": \"gdGap.gt-xs\",\n    \"gdGap.gt-sm\": \"gdGap.gt-sm\",\n    \"gdGap.gt-md\": \"gdGap.gt-md\",\n    \"gdGap.gt-lg\": \"gdGap.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridGapDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridGapDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridGapDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$8,\n      inputs: inputs$8\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/row/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$6 = 'auto';\n\nvar GridRowStyleBuilder = /*#__PURE__*/function (_StyleBuilder10) {\n  _inherits(GridRowStyleBuilder, _StyleBuilder10);\n\n  var _super28 = _createSuper(GridRowStyleBuilder);\n\n  function GridRowStyleBuilder() {\n    _classCallCheck(this, GridRowStyleBuilder);\n\n    return _super28.apply(this, arguments);\n  }\n\n  _createClass(GridRowStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function buildStyles(input) {\n      return {\n        'grid-row': input || DEFAULT_VALUE$6\n      };\n    }\n  }]);\n\n  return GridRowStyleBuilder;\n}(StyleBuilder);\n\nGridRowStyleBuilder.ɵfac = function GridRowStyleBuilder_Factory(t) {\n  return ɵGridRowStyleBuilder_BaseFactory(t || GridRowStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridRowStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridRowStyleBuilder_Factory() {\n    return new GridRowStyleBuilder();\n  },\n  token: GridRowStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridRowStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridRowStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridRowStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridRowDirective = /*#__PURE__*/function (_BaseDirective10) {\n  _inherits(GridRowDirective, _BaseDirective10);\n\n  var _super29 = _createSuper(GridRowDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridRowDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this19;\n\n    _classCallCheck(this, GridRowDirective);\n\n    _this19 = _super29.call(this, elementRef, styleBuilder, styler, marshal);\n    _this19.DIRECTIVE_KEY = 'grid-row';\n    _this19.styleCache = rowCache;\n\n    _this19.init();\n\n    return _this19;\n  }\n\n  return GridRowDirective;\n}(BaseDirective2);\n\nGridRowDirective.ɵfac = function GridRowDirective_Factory(t) {\n  return new (t || GridRowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridRowStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridRowDirective,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridRowDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridRowStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridRowDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridRowStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, null);\n})();\n/** @type {?} */\n\n\nvar rowCache = new Map();\n/** @type {?} */\n\nvar inputs$9 = ['gdRow', 'gdRow.xs', 'gdRow.sm', 'gdRow.md', 'gdRow.lg', 'gdRow.xl', 'gdRow.lt-sm', 'gdRow.lt-md', 'gdRow.lt-lg', 'gdRow.lt-xl', 'gdRow.gt-xs', 'gdRow.gt-sm', 'gdRow.gt-md', 'gdRow.gt-lg'];\n/** @type {?} */\n\nvar selector$9 = \"\\n  [gdRow],\\n  [gdRow.xs], [gdRow.sm], [gdRow.md], [gdRow.lg], [gdRow.xl],\\n  [gdRow.lt-sm], [gdRow.lt-md], [gdRow.lt-lg], [gdRow.lt-xl],\\n  [gdRow.gt-xs], [gdRow.gt-sm], [gdRow.gt-md], [gdRow.gt-lg]\\n\";\n/**\n * 'grid-row' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n\nvar DefaultGridRowDirective = /*#__PURE__*/function (_GridRowDirective) {\n  _inherits(DefaultGridRowDirective, _GridRowDirective);\n\n  var _super30 = _createSuper(DefaultGridRowDirective);\n\n  function DefaultGridRowDirective() {\n    var _this20;\n\n    _classCallCheck(this, DefaultGridRowDirective);\n\n    _this20 = _super30.apply(this, arguments);\n    _this20.inputs = inputs$9;\n    return _this20;\n  }\n\n  return DefaultGridRowDirective;\n}(GridRowDirective);\n\nDefaultGridRowDirective.ɵfac = function DefaultGridRowDirective_Factory(t) {\n  return ɵDefaultGridRowDirective_BaseFactory(t || DefaultGridRowDirective);\n};\n\nDefaultGridRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridRowDirective,\n  selectors: [[\"\", \"gdRow\", \"\"], [\"\", \"gdRow.xs\", \"\"], [\"\", \"gdRow.sm\", \"\"], [\"\", \"gdRow.md\", \"\"], [\"\", \"gdRow.lg\", \"\"], [\"\", \"gdRow.xl\", \"\"], [\"\", \"gdRow.lt-sm\", \"\"], [\"\", \"gdRow.lt-md\", \"\"], [\"\", \"gdRow.lt-lg\", \"\"], [\"\", \"gdRow.lt-xl\", \"\"], [\"\", \"gdRow.gt-xs\", \"\"], [\"\", \"gdRow.gt-sm\", \"\"], [\"\", \"gdRow.gt-md\", \"\"], [\"\", \"gdRow.gt-lg\", \"\"]],\n  inputs: {\n    gdRow: \"gdRow\",\n    \"gdRow.xs\": \"gdRow.xs\",\n    \"gdRow.sm\": \"gdRow.sm\",\n    \"gdRow.md\": \"gdRow.md\",\n    \"gdRow.lg\": \"gdRow.lg\",\n    \"gdRow.xl\": \"gdRow.xl\",\n    \"gdRow.lt-sm\": \"gdRow.lt-sm\",\n    \"gdRow.lt-md\": \"gdRow.lt-md\",\n    \"gdRow.lt-lg\": \"gdRow.lt-lg\",\n    \"gdRow.lt-xl\": \"gdRow.lt-xl\",\n    \"gdRow.gt-xs\": \"gdRow.gt-xs\",\n    \"gdRow.gt-sm\": \"gdRow.gt-sm\",\n    \"gdRow.gt-md\": \"gdRow.gt-md\",\n    \"gdRow.gt-lg\": \"gdRow.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridRowDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridRowDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridRowDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$9,\n      inputs: inputs$9\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/rows/rows.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$7 = 'none';\n/** @type {?} */\n\nvar AUTO_SPECIFIER$1 = '!';\n\nvar GridRowsStyleBuilder = /*#__PURE__*/function (_StyleBuilder11) {\n  _inherits(GridRowsStyleBuilder, _StyleBuilder11);\n\n  var _super31 = _createSuper(GridRowsStyleBuilder);\n\n  function GridRowsStyleBuilder() {\n    _classCallCheck(this, GridRowsStyleBuilder);\n\n    return _super31.apply(this, arguments);\n  }\n\n  _createClass(GridRowsStyleBuilder, [{\n    key: \"buildStyles\",\n    value:\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function buildStyles(input, parent) {\n      input = input || DEFAULT_VALUE$7;\n      /** @type {?} */\n\n      var auto = false;\n\n      if (input.endsWith(AUTO_SPECIFIER$1)) {\n        input = input.substring(0, input.indexOf(AUTO_SPECIFIER$1));\n        auto = true;\n      }\n      /** @type {?} */\n\n\n      var css = {\n        'display': parent.inline ? 'inline-grid' : 'grid',\n        'grid-auto-rows': '',\n        'grid-template-rows': ''\n      };\n      /** @type {?} */\n\n      var key = auto ? 'grid-auto-rows' : 'grid-template-rows';\n      css[key] = input;\n      return css;\n    }\n  }]);\n\n  return GridRowsStyleBuilder;\n}(StyleBuilder);\n\nGridRowsStyleBuilder.ɵfac = function GridRowsStyleBuilder_Factory(t) {\n  return ɵGridRowsStyleBuilder_BaseFactory(t || GridRowsStyleBuilder);\n};\n/** @nocollapse */\n\n\nGridRowsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function GridRowsStyleBuilder_Factory() {\n    return new GridRowsStyleBuilder();\n  },\n  token: GridRowsStyleBuilder,\n  providedIn: \"root\"\n});\nvar ɵGridRowsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridRowsStyleBuilder);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridRowsStyleBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nvar GridRowsDirective = /*#__PURE__*/function (_BaseDirective11) {\n  _inherits(GridRowsDirective, _BaseDirective11);\n\n  var _super32 = _createSuper(GridRowsDirective);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function GridRowsDirective(elementRef, styleBuilder, styler, marshal) {\n    var _this21;\n\n    _classCallCheck(this, GridRowsDirective);\n\n    _this21 = _super32.call(this, elementRef, styleBuilder, styler, marshal);\n    _this21.DIRECTIVE_KEY = 'grid-rows';\n    _this21._inline = false;\n\n    _this21.init();\n\n    return _this21;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GridRowsDirective, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._inline = coerceBooleanProperty(val);\n    } // *********************************************\n    // Protected methods\n    // *********************************************\n\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(value) {\n      this.styleCache = this.inline ? rowsInlineCache : rowsCache;\n      this.addStyles(value, {\n        inline: this.inline\n      });\n    }\n  }]);\n\n  return GridRowsDirective;\n}(BaseDirective2);\n\nGridRowsDirective.ɵfac = function GridRowsDirective_Factory(t) {\n  return new (t || GridRowsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridRowsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n};\n\nGridRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GridRowsDirective,\n  inputs: {\n    inline: [\"gdInline\", \"inline\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGridRowsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridRowsStyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }];\n};\n\nGridRowsDirective.propDecorators = {\n  inline: [{\n    type: Input,\n    args: ['gdInline']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridRowsDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridRowsStyleBuilder\n    }, {\n      type: ɵngcc1.StyleUtils\n    }, {\n      type: ɵngcc1.MediaMarshaller\n    }];\n  }, {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  });\n})();\n/** @type {?} */\n\n\nvar rowsCache = new Map();\n/** @type {?} */\n\nvar rowsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$10 = ['gdRows', 'gdRows.xs', 'gdRows.sm', 'gdRows.md', 'gdRows.lg', 'gdRows.xl', 'gdRows.lt-sm', 'gdRows.lt-md', 'gdRows.lt-lg', 'gdRows.lt-xl', 'gdRows.gt-xs', 'gdRows.gt-sm', 'gdRows.gt-md', 'gdRows.gt-lg'];\n/** @type {?} */\n\nvar selector$10 = \"\\n  [gdRows],\\n  [gdRows.xs], [gdRows.sm], [gdRows.md], [gdRows.lg], [gdRows.xl],\\n  [gdRows.lt-sm], [gdRows.lt-md], [gdRows.lt-lg], [gdRows.lt-xl],\\n  [gdRows.gt-xs], [gdRows.gt-sm], [gdRows.gt-md], [gdRows.gt-lg]\\n\";\n/**\n * 'grid-template-rows' CSS Grid styling directive\n * Configures the sizing for the rows in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n\nvar DefaultGridRowsDirective = /*#__PURE__*/function (_GridRowsDirective) {\n  _inherits(DefaultGridRowsDirective, _GridRowsDirective);\n\n  var _super33 = _createSuper(DefaultGridRowsDirective);\n\n  function DefaultGridRowsDirective() {\n    var _this22;\n\n    _classCallCheck(this, DefaultGridRowsDirective);\n\n    _this22 = _super33.apply(this, arguments);\n    _this22.inputs = inputs$10;\n    return _this22;\n  }\n\n  return DefaultGridRowsDirective;\n}(GridRowsDirective);\n\nDefaultGridRowsDirective.ɵfac = function DefaultGridRowsDirective_Factory(t) {\n  return ɵDefaultGridRowsDirective_BaseFactory(t || DefaultGridRowsDirective);\n};\n\nDefaultGridRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DefaultGridRowsDirective,\n  selectors: [[\"\", \"gdRows\", \"\"], [\"\", \"gdRows.xs\", \"\"], [\"\", \"gdRows.sm\", \"\"], [\"\", \"gdRows.md\", \"\"], [\"\", \"gdRows.lg\", \"\"], [\"\", \"gdRows.xl\", \"\"], [\"\", \"gdRows.lt-sm\", \"\"], [\"\", \"gdRows.lt-md\", \"\"], [\"\", \"gdRows.lt-lg\", \"\"], [\"\", \"gdRows.lt-xl\", \"\"], [\"\", \"gdRows.gt-xs\", \"\"], [\"\", \"gdRows.gt-sm\", \"\"], [\"\", \"gdRows.gt-md\", \"\"], [\"\", \"gdRows.gt-lg\", \"\"]],\n  inputs: {\n    gdRows: \"gdRows\",\n    \"gdRows.xs\": \"gdRows.xs\",\n    \"gdRows.sm\": \"gdRows.sm\",\n    \"gdRows.md\": \"gdRows.md\",\n    \"gdRows.lg\": \"gdRows.lg\",\n    \"gdRows.xl\": \"gdRows.xl\",\n    \"gdRows.lt-sm\": \"gdRows.lt-sm\",\n    \"gdRows.lt-md\": \"gdRows.lt-md\",\n    \"gdRows.lt-lg\": \"gdRows.lt-lg\",\n    \"gdRows.lt-xl\": \"gdRows.lt-xl\",\n    \"gdRows.gt-xs\": \"gdRows.gt-xs\",\n    \"gdRows.gt-sm\": \"gdRows.gt-sm\",\n    \"gdRows.gt-md\": \"gdRows.gt-md\",\n    \"gdRows.gt-lg\": \"gdRows.gt-lg\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵDefaultGridRowsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridRowsDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultGridRowsDirective, [{\n    type: Directive,\n    args: [{\n      selector: selector$10,\n      inputs: inputs$10\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar ALL_DIRECTIVES = [DefaultGridAlignDirective, DefaultGridAlignColumnsDirective, DefaultGridAlignRowsDirective, DefaultGridAreaDirective, DefaultGridAreasDirective, DefaultGridAutoDirective, DefaultGridColumnDirective, DefaultGridColumnsDirective, DefaultGridGapDirective, DefaultGridRowDirective, DefaultGridRowsDirective];\n/**\n * *****************************************************************\n * Define module for the CSS Grid API\n * *****************************************************************\n */\n\nvar GridModule = function GridModule() {\n  _classCallCheck(this, GridModule);\n};\n\nGridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: GridModule\n});\nGridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function GridModule_Factory(t) {\n    return new (t || GridModule)();\n  },\n  imports: [[CoreModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridModule, {\n    declarations: function declarations() {\n      return [DefaultGridAlignDirective, DefaultGridAlignColumnsDirective, DefaultGridAlignRowsDirective, DefaultGridAreaDirective, DefaultGridAreasDirective, DefaultGridAutoDirective, DefaultGridColumnDirective, DefaultGridColumnsDirective, DefaultGridGapDirective, DefaultGridRowDirective, DefaultGridRowsDirective];\n    },\n    imports: function imports() {\n      return [CoreModule];\n    },\n    exports: function exports() {\n      return [DefaultGridAlignDirective, DefaultGridAlignColumnsDirective, DefaultGridAlignRowsDirective, DefaultGridAreaDirective, DefaultGridAreasDirective, DefaultGridAutoDirective, DefaultGridColumnDirective, DefaultGridColumnsDirective, DefaultGridGapDirective, DefaultGridRowDirective, DefaultGridRowsDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CoreModule],\n      declarations: [].concat(ALL_DIRECTIVES),\n      exports: [].concat(ALL_DIRECTIVES)\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { GridModule, DefaultGridAlignColumnsDirective as ɵgrid_privatef, GridAlignColumnsDirective as ɵgrid_privatee, GridAlignColumnsStyleBuilder as ɵgrid_privated, DefaultGridAlignRowsDirective as ɵgrid_privatei, GridAlignRowsDirective as ɵgrid_privateh, GridAlignRowsStyleBuilder as ɵgrid_privateg, DefaultGridAreaDirective as ɵgrid_privatel, GridAreaDirective as ɵgrid_privatek, GridAreaStyleBuilder as ɵgrid_privatej, DefaultGridAreasDirective as ɵgrid_privateo, GridAreasDirective as ɵgrid_privaten, GridAreasStyleBuiler as ɵgrid_privatem, DefaultGridAutoDirective as ɵgrid_privater, GridAutoDirective as ɵgrid_privateq, GridAutoStyleBuilder as ɵgrid_privatep, DefaultGridColumnDirective as ɵgrid_privateu, GridColumnDirective as ɵgrid_privatet, GridColumnStyleBuilder as ɵgrid_privates, DefaultGridColumnsDirective as ɵgrid_privatex, GridColumnsDirective as ɵgrid_privatew, GridColumnsStyleBuilder as ɵgrid_privatev, DefaultGridGapDirective as ɵgrid_privateba, GridGapDirective as ɵgrid_privatez, GridGapStyleBuilder as ɵgrid_privatey, DefaultGridAlignDirective as ɵgrid_privatec, GridAlignDirective as ɵgrid_privateb, GridAlignStyleBuilder as ɵgrid_privatea, DefaultGridRowDirective as ɵgrid_privatebd, GridRowDirective as ɵgrid_privatebc, GridRowStyleBuilder as ɵgrid_privatebb, DefaultGridRowsDirective as ɵgrid_privatebg, GridRowsDirective as ɵgrid_privatebf, GridRowsStyleBuilder as ɵgrid_privatebe };","map":{"version":3,"sources":["../../../src/lib/grid/grid-align/grid-align.ts","../../../src/lib/grid/align-columns/align-columns.ts","../../../src/lib/grid/align-rows/align-rows.ts","../../../src/lib/grid/area/area.ts","../../../src/lib/grid/areas/areas.ts","../../../src/lib/grid/auto/auto.ts","../../../src/lib/grid/column/column.ts","../../../src/lib/grid/columns/columns.ts","../../../src/lib/grid/gap/gap.ts","../../../src/lib/grid/row/row.ts","../../../src/lib/grid/rows/rows.ts","../../../src/lib/grid/module.ts"],"names":["buildCss","inputs","selector","DEFAULT_MAIN","DEFAULT_CROSS","DEFAULT_VALUE","AUTO_SPECIFIER"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  MediaMarshaller,\n  BaseDirective2,\n  StyleBuilder,\n  StyleDefinition,\n  StyleUtils,\n} from '@angular/flex-layout/core';\n\nconst ROW_DEFAULT = 'stretch';\nconst COL_DEFAULT = 'stretch';\n\n@Injectable({providedIn: 'root'})\nexport class GridAlignStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return buildCss(input || ROW_DEFAULT);\n  }\n}\n\n@Directive()\nexport class GridAlignDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-align';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAlignStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  protected styleCache = alignCache;\n}\n\nconst alignCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdGridAlign',\n  'gdGridAlign.xs', 'gdGridAlign.sm', 'gdGridAlign.md', 'gdGridAlign.lg', 'gdGridAlign.xl',\n  'gdGridAlign.lt-sm', 'gdGridAlign.lt-md', 'gdGridAlign.lt-lg', 'gdGridAlign.lt-xl',\n  'gdGridAlign.gt-xs', 'gdGridAlign.gt-sm', 'gdGridAlign.gt-md', 'gdGridAlign.gt-lg'\n];\n\nconst selector = `\n  [gdGridAlign],\n  [gdGridAlign.xs], [gdGridAlign.sm], [gdGridAlign.md], [gdGridAlign.lg],[gdGridAlign.xl],\n  [gdGridAlign.lt-sm], [gdGridAlign.lt-md], [gdGridAlign.lt-lg], [gdGridAlign.lt-xl],\n  [gdGridAlign.gt-xs], [gdGridAlign.gt-sm], [gdGridAlign.gt-md], [gdGridAlign.gt-lg]\n`;\n\n/**\n * 'align' CSS Grid styling directive for grid children\n *  Defines positioning of child elements along row and column axis in a grid container\n *  Optional values: {row-axis} values or {row-axis column-axis} value pairs\n *\n *  @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\n *  @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\n */\n@Directive({selector, inputs})\nexport class DefaultGridAlignDirective extends GridAlignDirective {\n  protected inputs = inputs;\n}\n\nfunction buildCss(align: string = '') {\n  const css: {[key: string]: string} = {}, [rowAxis, columnAxis] = align.split(' ');\n\n  // Row axis\n  switch (rowAxis) {\n    case 'end':\n      css['justify-self'] = 'end';\n      break;\n    case 'center':\n      css['justify-self'] = 'center';\n      break;\n    case 'stretch':\n      css['justify-self'] = 'stretch';\n      break;\n    case 'start':\n      css['justify-self'] = 'start';\n      break;\n    default:\n      css['justify-self'] = ROW_DEFAULT;  // default row axis\n      break;\n  }\n\n  // Column axis\n  switch (columnAxis) {\n    case 'end':\n      css['align-self'] = 'end';\n      break;\n    case 'center':\n      css['align-self'] = 'center';\n      break;\n    case 'stretch':\n      css['align-self'] = 'stretch';\n      break;\n    case 'start':\n      css['align-self'] = 'start';\n      break;\n    default:\n      css['align-self'] = COL_DEFAULT;  // default column axis\n      break;\n  }\n\n  return css;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable, Input} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  StyleDefinition,\n  MediaMarshaller,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_MAIN = 'start';\nconst DEFAULT_CROSS = 'stretch';\n\nexport interface GridAlignColumnsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAlignColumnsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridAlignColumnsParent) {\n    return buildCss(input || `${DEFAULT_MAIN} ${DEFAULT_CROSS}`, parent.inline);\n  }\n}\n\n@Directive()\nexport class GridAlignColumnsDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-align-columns';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAlignColumnsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? alignColumnsInlineCache : alignColumnsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst alignColumnsCache: Map<string, StyleDefinition> = new Map();\nconst alignColumnsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAlignColumns',\n  'gdAlignColumns.xs', 'gdAlignColumns.sm', 'gdAlignColumns.md',\n  'gdAlignColumns.lg', 'gdAlignColumns.xl', 'gdAlignColumns.lt-sm',\n  'gdAlignColumns.lt-md', 'gdAlignColumns.lt-lg', 'gdAlignColumns.lt-xl',\n  'gdAlignColumns.gt-xs', 'gdAlignColumns.gt-sm', 'gdAlignColumns.gt-md',\n  'gdAlignColumns.gt-lg'\n];\nconst selector = `\n  [gdAlignColumns],\n  [gdAlignColumns.xs], [gdAlignColumns.sm], [gdAlignColumns.md],\n  [gdAlignColumns.lg], [gdAlignColumns.xl], [gdAlignColumns.lt-sm],\n  [gdAlignColumns.lt-md], [gdAlignColumns.lt-lg], [gdAlignColumns.lt-xl],\n  [gdAlignColumns.gt-xs], [gdAlignColumns.gt-sm], [gdAlignColumns.gt-md],\n  [gdAlignColumns.gt-lg]\n`;\n\n/**\n * 'column alignment' CSS Grid styling directive\n * Configures the alignment in the column direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21\n */\n@Directive({selector, inputs})\nexport class DefaultGridAlignColumnsDirective extends GridAlignColumnsDirective {\n  protected inputs = inputs;\n}\n\nfunction buildCss(align: string, inline: boolean): StyleDefinition {\n  const css: {[key: string]: string} = {}, [mainAxis, crossAxis] = align.split(' ');\n\n  // Main axis\n  switch (mainAxis) {\n    case 'center':\n      css['align-content'] = 'center';\n      break;\n    case 'space-around':\n      css['align-content'] = 'space-around';\n      break;\n    case 'space-between':\n      css['align-content'] = 'space-between';\n      break;\n    case 'space-evenly':\n      css['align-content'] = 'space-evenly';\n      break;\n    case 'end':\n      css['align-content'] = 'end';\n      break;\n    case 'start':\n      css['align-content'] = 'start';\n      break;\n    case 'stretch':\n      css['align-content'] = 'stretch';\n      break;\n    default:\n      css['align-content'] = DEFAULT_MAIN;  // default main axis\n      break;\n  }\n\n  // Cross-axis\n  switch (crossAxis) {\n    case 'start':\n      css['align-items'] = 'start';\n      break;\n    case 'center':\n      css['align-items'] = 'center';\n      break;\n    case 'end':\n      css['align-items'] = 'end';\n      break;\n    case 'stretch':\n      css['align-items'] = 'stretch';\n      break;\n    default : // 'stretch'\n      css['align-items'] = DEFAULT_CROSS;   // default cross axis\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n\n  return css;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable, Input} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  StyleDefinition,\n  MediaMarshaller,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_MAIN = 'start';\nconst DEFAULT_CROSS = 'stretch';\n\nexport interface GridAlignRowsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAlignRowsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridAlignRowsParent) {\n    return buildCss(input || `${DEFAULT_MAIN} ${DEFAULT_CROSS}`, parent.inline);\n  }\n}\n\n@Directive()\nexport class GridAlignRowsDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-align-rows';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAlignRowsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? alignRowsInlineCache : alignRowsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst alignRowsCache: Map<string, StyleDefinition> = new Map();\nconst alignRowsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAlignRows',\n  'gdAlignRows.xs', 'gdAlignRows.sm', 'gdAlignRows.md',\n  'gdAlignRows.lg', 'gdAlignRows.xl', 'gdAlignRows.lt-sm',\n  'gdAlignRows.lt-md', 'gdAlignRows.lt-lg', 'gdAlignRows.lt-xl',\n  'gdAlignRows.gt-xs', 'gdAlignRows.gt-sm', 'gdAlignRows.gt-md',\n  'gdAlignRows.gt-lg'\n];\nconst selector = `\n  [gdAlignRows],\n  [gdAlignRows.xs], [gdAlignRows.sm], [gdAlignRows.md],\n  [gdAlignRows.lg], [gdAlignRows.xl], [gdAlignRows.lt-sm],\n  [gdAlignRows.lt-md], [gdAlignRows.lt-lg], [gdAlignRows.lt-xl],\n  [gdAlignRows.gt-xs], [gdAlignRows.gt-sm], [gdAlignRows.gt-md],\n  [gdAlignRows.gt-lg]\n`;\n\n/**\n * 'row alignment' CSS Grid styling directive\n * Configures the alignment in the row direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20\n */\n@Directive({selector, inputs})\nexport class DefaultGridAlignRowsDirective extends GridAlignRowsDirective {\n  protected inputs = inputs;\n}\n\nfunction buildCss(align: string, inline: boolean): StyleDefinition {\n  const css: {[key: string]: string} = {}, [mainAxis, crossAxis] = align.split(' ');\n\n  // Main axis\n  switch (mainAxis) {\n    case 'center':\n    case 'space-around':\n    case 'space-between':\n    case 'space-evenly':\n    case 'end':\n    case 'start':\n    case 'stretch':\n      css['justify-content'] = mainAxis;\n      break;\n    default:\n      css['justify-content'] = DEFAULT_MAIN;  // default main axis\n      break;\n  }\n\n  // Cross-axis\n  switch (crossAxis) {\n    case 'start':\n    case 'center':\n    case 'end':\n    case 'stretch':\n      css['justify-items'] = crossAxis;\n      break;\n    default : // 'stretch'\n      css['justify-items'] = DEFAULT_CROSS;   // default cross axis\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n\n  return css;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\n\nconst DEFAULT_VALUE = 'auto';\n\n@Injectable({providedIn: 'root'})\nexport class GridAreaStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return {'grid-area': input || DEFAULT_VALUE};\n  }\n}\n\n@Directive()\nexport class GridAreaDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-area';\n\n  constructor(elRef: ElementRef,\n              styleUtils: StyleUtils,\n              styleBuilder: GridAreaStyleBuilder,\n              marshal: MediaMarshaller) {\n    super(elRef, styleBuilder, styleUtils, marshal);\n    this.init();\n  }\n\n  protected styleCache = gridAreaCache;\n}\n\nconst gridAreaCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdArea',\n  'gdArea.xs', 'gdArea.sm', 'gdArea.md', 'gdArea.lg', 'gdArea.xl',\n  'gdArea.lt-sm', 'gdArea.lt-md', 'gdArea.lt-lg', 'gdArea.lt-xl',\n  'gdArea.gt-xs', 'gdArea.gt-sm', 'gdArea.gt-md', 'gdArea.gt-lg'\n];\nconst selector = `\n  [gdArea],\n  [gdArea.xs], [gdArea.sm], [gdArea.md], [gdArea.lg], [gdArea.xl],\n  [gdArea.lt-sm], [gdArea.lt-md], [gdArea.lt-lg], [gdArea.lt-xl],\n  [gdArea.gt-xs], [gdArea.gt-sm], [gdArea.gt-md], [gdArea.gt-lg]\n`;\n\n/**\n * 'grid-area' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27\n */\n@Directive({selector, inputs})\nexport class DefaultGridAreaDirective extends GridAreaDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable, Input} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  MediaMarshaller,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'none';\nconst DELIMETER = '|';\n\nexport interface GridAreasParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAreasStyleBuiler extends StyleBuilder {\n  buildStyles(input: string, parent: GridAreasParent) {\n    const areas = (input || DEFAULT_VALUE).split(DELIMETER).map(v => `\"${v.trim()}\"`);\n\n    return {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-template-areas': areas.join(' ')\n    };\n  }\n}\n\n@Directive()\nexport class GridAreasDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-areas';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elRef: ElementRef,\n              styleUtils: StyleUtils,\n              styleBuilder: GridAreasStyleBuiler,\n              marshal: MediaMarshaller) {\n    super(elRef, styleBuilder, styleUtils, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? areasInlineCache : areasCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst areasCache: Map<string, StyleDefinition> = new Map();\nconst areasInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAreas',\n  'gdAreas.xs', 'gdAreas.sm', 'gdAreas.md', 'gdAreas.lg', 'gdAreas.xl',\n  'gdAreas.lt-sm', 'gdAreas.lt-md', 'gdAreas.lt-lg', 'gdAreas.lt-xl',\n  'gdAreas.gt-xs', 'gdAreas.gt-sm', 'gdAreas.gt-md', 'gdAreas.gt-lg'\n];\n\nconst selector = `\n  [gdAreas],\n  [gdAreas.xs], [gdAreas.sm], [gdAreas.md], [gdAreas.lg], [gdAreas.xl],\n  [gdAreas.lt-sm], [gdAreas.lt-md], [gdAreas.lt-lg], [gdAreas.lt-xl],\n  [gdAreas.gt-xs], [gdAreas.gt-sm], [gdAreas.gt-md], [gdAreas.gt-lg]\n`;\n\n/**\n * 'grid-template-areas' CSS Grid styling directive\n * Configures the names of elements within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14\n */\n@Directive({selector, inputs})\nexport class DefaultGridAreasDirective extends GridAreasDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  MediaMarshaller,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'initial';\n\nexport interface GridAutoParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAutoStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridAutoParent) {\n    let [direction, dense] = (input || DEFAULT_VALUE).split(' ');\n    if (direction !== 'column' && direction !== 'row' && direction !== 'dense') {\n      direction = 'row';\n    }\n\n    dense = (dense === 'dense' && direction !== 'dense') ? ' dense' : '';\n\n    return {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-auto-flow': direction + dense\n    };\n  }\n}\n\n@Directive()\nexport class GridAutoDirective extends BaseDirective2 {\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  protected DIRECTIVE_KEY = 'grid-auto';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAutoStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? autoInlineCache : autoCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst autoCache: Map<string, StyleDefinition> = new Map();\nconst autoInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAuto',\n  'gdAuto.xs', 'gdAuto.sm', 'gdAuto.md', 'gdAuto.lg', 'gdAuto.xl',\n  'gdAuto.lt-sm', 'gdAuto.lt-md', 'gdAuto.lt-lg', 'gdAuto.lt-xl',\n  'gdAuto.gt-xs', 'gdAuto.gt-sm', 'gdAuto.gt-md', 'gdAuto.gt-lg'\n];\nconst selector = `\n  [gdAuto],\n  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],\n  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],\n  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]\n`;\n\n/**\n * 'grid-auto-flow' CSS Grid styling directive\n * Configures the auto placement algorithm for the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23\n */\n@Directive({selector, inputs})\nexport class DefaultGridAutoDirective extends GridAutoDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\n\nconst DEFAULT_VALUE = 'auto';\n\n@Injectable({providedIn: 'root'})\nexport class GridColumnStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return {'grid-column': input || DEFAULT_VALUE};\n  }\n}\n\n@Directive()\nexport class GridColumnDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-column';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridColumnStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  protected styleCache = columnCache;\n}\n\nconst columnCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdColumn',\n  'gdColumn.xs', 'gdColumn.sm', 'gdColumn.md', 'gdColumn.lg', 'gdColumn.xl',\n  'gdColumn.lt-sm', 'gdColumn.lt-md', 'gdColumn.lt-lg', 'gdColumn.lt-xl',\n  'gdColumn.gt-xs', 'gdColumn.gt-sm', 'gdColumn.gt-md', 'gdColumn.gt-lg'\n];\n\nconst selector = `\n  [gdColumn],\n  [gdColumn.xs], [gdColumn.sm], [gdColumn.md], [gdColumn.lg], [gdColumn.xl],\n  [gdColumn.lt-sm], [gdColumn.lt-md], [gdColumn.lt-lg], [gdColumn.lt-xl],\n  [gdColumn.gt-xs], [gdColumn.gt-sm], [gdColumn.gt-md], [gdColumn.gt-lg]\n`;\n\n/**\n * 'grid-column' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n@Directive({selector, inputs})\nexport class DefaultGridColumnDirective extends GridColumnDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  MediaMarshaller,\n  BaseDirective2,\n  StyleBuilder,\n  StyleDefinition,\n  StyleUtils,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'none';\nconst AUTO_SPECIFIER = '!';\n\nexport interface GridColumnsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridColumnsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridColumnsParent) {\n    input = input || DEFAULT_VALUE;\n    let auto = false;\n    if (input.endsWith(AUTO_SPECIFIER)) {\n      input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n      auto = true;\n    }\n\n    const css = {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-auto-columns': '',\n      'grid-template-columns': '',\n    };\n    const key = (auto ? 'grid-auto-columns' : 'grid-template-columns');\n    css[key] = input;\n\n    return css;\n  }\n}\n\n@Directive()\nexport class GridColumnsDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-columns';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridColumnsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? columnsInlineCache : columnsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst columnsCache: Map<string, StyleDefinition> = new Map();\nconst columnsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdColumns',\n  'gdColumns.xs', 'gdColumns.sm', 'gdColumns.md', 'gdColumns.lg', 'gdColumns.xl',\n  'gdColumns.lt-sm', 'gdColumns.lt-md', 'gdColumns.lt-lg', 'gdColumns.lt-xl',\n  'gdColumns.gt-xs', 'gdColumns.gt-sm', 'gdColumns.gt-md', 'gdColumns.gt-lg'\n];\n\nconst selector = `\n  [gdColumns],\n  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],\n  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],\n  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]\n`;\n\n/**\n * 'grid-template-columns' CSS Grid styling directive\n * Configures the sizing for the columns in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n@Directive({selector, inputs})\nexport class DefaultGridColumnsDirective extends GridColumnsDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = '0';\n\nexport interface GridGapParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridGapStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridGapParent) {\n    return {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-gap': input || DEFAULT_VALUE\n    };\n  }\n}\n\n@Directive()\nexport class GridGapDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-gap';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elRef: ElementRef,\n              styleUtils: StyleUtils,\n              styleBuilder: GridGapStyleBuilder,\n              marshal: MediaMarshaller) {\n    super(elRef, styleBuilder, styleUtils, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? gapInlineCache : gapCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst gapCache: Map<string, StyleDefinition> = new Map();\nconst gapInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdGap',\n  'gdGap.xs', 'gdGap.sm', 'gdGap.md', 'gdGap.lg', 'gdGap.xl',\n  'gdGap.lt-sm', 'gdGap.lt-md', 'gdGap.lt-lg', 'gdGap.lt-xl',\n  'gdGap.gt-xs', 'gdGap.gt-sm', 'gdGap.gt-md', 'gdGap.gt-lg'\n];\n\nconst selector = `\n  [gdGap],\n  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],\n  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],\n  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]\n`;\n\n/**\n * 'grid-gap' CSS Grid styling directive\n * Configures the gap between items in the grid\n * Syntax: <row gap> [<column-gap>]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17\n */\n@Directive({selector, inputs})\nexport class DefaultGridGapDirective extends GridGapDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\n\nconst DEFAULT_VALUE = 'auto';\n\n@Injectable({providedIn: 'root'})\nexport class GridRowStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return {'grid-row': input || DEFAULT_VALUE};\n  }\n}\n\n@Directive()\nexport class GridRowDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-row';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridRowStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  protected styleCache = rowCache;\n}\n\nconst rowCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdRow',\n  'gdRow.xs', 'gdRow.sm', 'gdRow.md', 'gdRow.lg', 'gdRow.xl',\n  'gdRow.lt-sm', 'gdRow.lt-md', 'gdRow.lt-lg', 'gdRow.lt-xl',\n  'gdRow.gt-xs', 'gdRow.gt-sm', 'gdRow.gt-md', 'gdRow.gt-lg'\n];\n\nconst selector = `\n  [gdRow],\n  [gdRow.xs], [gdRow.sm], [gdRow.md], [gdRow.lg], [gdRow.xl],\n  [gdRow.lt-sm], [gdRow.lt-md], [gdRow.lt-lg], [gdRow.lt-xl],\n  [gdRow.gt-xs], [gdRow.gt-sm], [gdRow.gt-md], [gdRow.gt-lg]\n`;\n\n/**\n * 'grid-row' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n@Directive({selector, inputs})\nexport class DefaultGridRowDirective extends GridRowDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  MediaMarshaller,\n  BaseDirective2,\n  StyleBuilder,\n  StyleDefinition,\n  StyleUtils,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'none';\nconst AUTO_SPECIFIER = '!';\n\nexport interface GridRowsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridRowsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridRowsParent) {\n    input = input || DEFAULT_VALUE;\n    let auto = false;\n    if (input.endsWith(AUTO_SPECIFIER)) {\n      input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n      auto = true;\n    }\n\n    const css = {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-auto-rows': '',\n      'grid-template-rows': '',\n    };\n    const key = (auto ? 'grid-auto-rows' : 'grid-template-rows');\n    css[key] = input;\n\n    return css;\n  }\n}\n\n@Directive()\nexport class GridRowsDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-rows';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridRowsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? rowsInlineCache : rowsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst rowsCache: Map<string, StyleDefinition> = new Map();\nconst rowsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdRows',\n  'gdRows.xs', 'gdRows.sm', 'gdRows.md', 'gdRows.lg', 'gdRows.xl',\n  'gdRows.lt-sm', 'gdRows.lt-md', 'gdRows.lt-lg', 'gdRows.lt-xl',\n  'gdRows.gt-xs', 'gdRows.gt-sm', 'gdRows.gt-md', 'gdRows.gt-lg'\n];\n\nconst selector = `\n  [gdRows],\n  [gdRows.xs], [gdRows.sm], [gdRows.md], [gdRows.lg], [gdRows.xl],\n  [gdRows.lt-sm], [gdRows.lt-md], [gdRows.lt-lg], [gdRows.lt-xl],\n  [gdRows.gt-xs], [gdRows.gt-sm], [gdRows.gt-md], [gdRows.gt-lg]\n`;\n\n/**\n * 'grid-template-rows' CSS Grid styling directive\n * Configures the sizing for the rows in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n@Directive({selector, inputs})\nexport class DefaultGridRowsDirective extends GridRowsDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CoreModule} from '@angular/flex-layout/core';\n\nimport {DefaultGridAlignDirective} from './grid-align/grid-align';\nimport {DefaultGridAlignColumnsDirective} from './align-columns/align-columns';\nimport {DefaultGridAlignRowsDirective} from './align-rows/align-rows';\nimport {DefaultGridAreaDirective} from './area/area';\nimport {DefaultGridAreasDirective} from './areas/areas';\nimport {DefaultGridAutoDirective} from './auto/auto';\nimport {DefaultGridColumnDirective} from './column/column';\nimport {DefaultGridColumnsDirective} from './columns/columns';\nimport {DefaultGridGapDirective} from './gap/gap';\nimport {DefaultGridRowDirective} from './row/row';\nimport {DefaultGridRowsDirective} from './rows/rows';\n\n\nconst ALL_DIRECTIVES = [\n  DefaultGridAlignDirective,\n  DefaultGridAlignColumnsDirective,\n  DefaultGridAlignRowsDirective,\n  DefaultGridAreaDirective,\n  DefaultGridAreasDirective,\n  DefaultGridAutoDirective,\n  DefaultGridColumnDirective,\n  DefaultGridColumnsDirective,\n  DefaultGridGapDirective,\n  DefaultGridRowDirective,\n  DefaultGridRowsDirective,\n];\n\n/**\n * *****************************************************************\n * Define module for the CSS Grid API\n * *****************************************************************\n */\n\n@NgModule({\n  imports: [CoreModule],\n  declarations: [...ALL_DIRECTIVES],\n  exports: [...ALL_DIRECTIVES]\n})\nexport class GridModule {\n}\n"]},"metadata":{},"sourceType":"module"}