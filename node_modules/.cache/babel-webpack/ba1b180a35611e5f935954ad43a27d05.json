{"ast":null,"code":"import _createForOfIteratorHelper from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, merge, asapScheduler, of, fromEvent } from 'rxjs';\nimport { filter, debounceTime, map, switchMap, takeUntil, take, tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: core/browser-provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction removeStyles(_document, platformId) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      if (isPlatformBrowser(platformId)) {\n        /** @type {?} */\n        var elements = Array.from(_document.querySelectorAll(\"[class*=\".concat(CLASS_NAME, \"]\"))); // RegExp constructor should only be used if passing a variable to the constructor.\n        // When using static regular expression it is more performant to use reg exp literal.\n        // This is also needed to provide Safari 9 compatibility, please see\n        // https://stackoverflow.com/questions/37919802 for more discussion.\n\n        /** @type {?} */\n\n        var classRegex = /\\bflex-layout-.+?\\b/g;\n        elements.forEach(\n        /**\n        * @param {?} el\n        * @return {?}\n        */\n        function (el) {\n          el.classList.contains(\"\".concat(CLASS_NAME, \"ssr\")) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n        });\n      }\n    }\n  );\n}\n/**\n *  Provider to remove SSR styles on the browser\n * @type {?}\n */\n\n\nvar BROWSER_PROVIDER = {\n  provide:\n  /** @type {?} */\n  APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n/** @type {?} */\n\nvar CLASS_NAME = 'flex-layout-';\n/**\n * @fileoverview added by tsickle\n * Generated from: core/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\n\nvar CoreModule = function CoreModule() {\n  _classCallCheck(this, CoreModule);\n};\n\nCoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CoreModule\n});\nCoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CoreModule_Factory(t) {\n    return new (t || CoreModule)();\n  },\n  providers: [BROWSER_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-change.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\n\n\nvar MediaChange = /*#__PURE__*/function () {\n  /**\n   * @param {?=} matches whether the mediaQuery is currently activated\n   * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param {?=} mqAlias e.g. gt-sm, md, gt-lg\n   * @param {?=} suffix e.g. GtSM, Md, GtLg\n   * @param {?=} priority the priority of activation for the given breakpoint\n   */\n  function MediaChange() {\n    var matches = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var mediaQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n    var mqAlias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n    _classCallCheck(this, MediaChange);\n\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /**\n   * Create an exact copy of the MediaChange\n   * @return {?}\n   */\n\n\n  _createClass(MediaChange, [{\n    key: \"clone\",\n    value: function clone() {\n      return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n  }]);\n\n  return MediaChange;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/stylesheet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n\n\nvar StylesheetMap = /*#__PURE__*/function () {\n  function StylesheetMap() {\n    _classCallCheck(this, StylesheetMap);\n\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   * @param {?} element\n   * @param {?} style\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(StylesheetMap, [{\n    key: \"addStyleToElement\",\n    value: function addStyleToElement(element, style, value) {\n      /** @type {?} */\n      var stylesheet = this.stylesheet.get(element);\n\n      if (stylesheet) {\n        stylesheet.set(style, value);\n      } else {\n        this.stylesheet.set(element, new Map([[style, value]]));\n      }\n    }\n    /**\n     * Clear the virtual stylesheet\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearStyles\",\n    value: function clearStyles() {\n      this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     * @param {?} el\n     * @param {?} styleName\n     * @return {?}\n     */\n\n  }, {\n    key: \"getStyleForElement\",\n    value: function getStyleForElement(el, styleName) {\n      /** @type {?} */\n      var styles = this.stylesheet.get(el);\n      /** @type {?} */\n\n      var value = '';\n\n      if (styles) {\n        /** @type {?} */\n        var style = styles.get(styleName);\n\n        if (typeof style === 'number' || typeof style === 'string') {\n          value = style + '';\n        }\n      }\n\n      return value;\n    }\n  }]);\n\n  return StylesheetMap;\n}();\n\nStylesheetMap.ɵfac = function StylesheetMap_Factory(t) {\n  return new (t || StylesheetMap)();\n};\n/** @nocollapse */\n\n\nStylesheetMap.ɵprov = ɵɵdefineInjectable({\n  factory: function StylesheetMap_Factory() {\n    return new StylesheetMap();\n  },\n  token: StylesheetMap,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/library-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: []\n};\n/** @type {?} */\n\nvar LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return DEFAULT_CONFIG;\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/server-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n * @type {?}\n */\n\nvar SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return false;\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/breakpoint-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return null;\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/add-alias.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\nfunction mergeAlias(dest, source) {\n  dest = dest ? dest.clone() : new MediaChange();\n\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix =\n    /** @type {?} */\n    source.suffix;\n    dest.priority =\n    /** @type {?} */\n    source.priority;\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/layout-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\n\n\nvar INLINE = 'inline';\n/** @type {?} */\n\nvar LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\n\nfunction buildLayoutCSS(value) {\n  var _validateValue = validateValue(value),\n      _validateValue2 = _slicedToArray(_validateValue, 3),\n      direction = _validateValue2[0],\n      wrap = _validateValue2[1],\n      isInline = _validateValue2[2];\n\n  return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\n\n\nfunction validateValue(value) {\n  value = value ? value.toLowerCase() : '';\n\n  var _value$split = value.split(' '),\n      _value$split2 = _slicedToArray(_value$split, 3),\n      direction = _value$split2[0],\n      wrap = _value$split2[1],\n      inline = _value$split2[2]; // First value must be the `flex-direction`\n\n\n  if (!LAYOUT_VALUES.find(\n  /**\n  * @param {?} x\n  * @return {?}\n  */\n  function (x) {\n    return x === direction;\n  })) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = inline !== INLINE ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\n\n\nfunction validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n      // All other values fallback to 'wrap'\n\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n\n  return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\n\n\nfunction buildCSS(direction) {\n  var wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var inline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/base2.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar BaseDirective2 = /*#__PURE__*/function () {\n  /**\n   * @protected\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function BaseDirective2(elementRef, styleBuilder, styler, marshal) {\n    _classCallCheck(this, BaseDirective2);\n\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /**\n     * The most recently used styles for the builder\n     */\n\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /**\n     * Cache map for style computation\n     */\n\n    this.styleCache = new Map();\n  }\n  /**\n   * Access to host element's parent DOM node\n   * @protected\n   * @return {?}\n   */\n\n\n  _createClass(BaseDirective2, [{\n    key: \"parentElement\",\n    get: function get() {\n      return this.elementRef.nativeElement.parentElement;\n    }\n    /**\n     * Access to the HTMLElement for the directive\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"nativeElement\",\n    get: function get() {\n      return this.elementRef.nativeElement;\n    }\n    /**\n     * Access to the activated value for the directive\n     * @return {?}\n     */\n\n  }, {\n    key: \"activatedValue\",\n    get: function get() {\n      return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /**\n     * For \\@Input changes\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this = this;\n\n      Object.keys(changes).forEach(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      function (key) {\n        if (_this.inputs.indexOf(key) !== -1) {\n          /** @type {?} */\n          var bp = key.split('.').slice(1).join('.');\n          /** @type {?} */\n\n          var val = changes[key].currentValue;\n\n          _this.setValue(val, bp);\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroySubject.next();\n      this.destroySubject.complete();\n      this.marshal.releaseElement(this.nativeElement);\n    }\n    /**\n     * Register with central marshaller service\n     * @protected\n     * @param {?=} extraTriggers\n     * @return {?}\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var extraTriggers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /**\n     * Add styles to the element using predefined style builder\n     * @protected\n     * @param {?} input\n     * @param {?=} parent\n     * @return {?}\n     */\n\n  }, {\n    key: \"addStyles\",\n    value: function addStyles(input, parent) {\n      /** @type {?} */\n      var builder = this.styleBuilder;\n      /** @type {?} */\n\n      var useCache = builder.shouldCache;\n      /** @type {?} */\n\n      var genStyles = this.styleCache.get(input);\n\n      if (!genStyles || !useCache) {\n        genStyles = builder.buildStyles(input, parent);\n\n        if (useCache) {\n          this.styleCache.set(input, genStyles);\n        }\n      }\n\n      this.mru = Object.assign({}, genStyles);\n      this.applyStyleToElement(genStyles);\n      builder.sideEffect(input, genStyles, parent);\n    }\n    /**\n     * Remove generated styles from an element using predefined style builder\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearStyles\",\n    value: function clearStyles() {\n      var _this2 = this;\n\n      Object.keys(this.mru).forEach(\n      /**\n      * @param {?} k\n      * @return {?}\n      */\n      function (k) {\n        _this2.mru[k] = '';\n      });\n      this.applyStyleToElement(this.mru);\n      this.mru = {};\n    }\n    /**\n     * Force trigger style updates on DOM element\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggerUpdate\",\n    value: function triggerUpdate() {\n      this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @protected\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFlexFlowDirection\",\n    value: function getFlexFlowDirection(target) {\n      var addIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (target) {\n        var _this$styler$getFlowD = this.styler.getFlowDirection(target),\n            _this$styler$getFlowD2 = _slicedToArray(_this$styler$getFlowD, 2),\n            value = _this$styler$getFlowD2[0],\n            hasInlineValue = _this$styler$getFlowD2[1];\n\n        if (!hasInlineValue && addIfMissing) {\n          /** @type {?} */\n          var style = buildLayoutCSS(value);\n          /** @type {?} */\n\n          var elements = [target];\n          this.styler.applyStyleToElements(style, elements);\n        }\n\n        return value.trim();\n      }\n\n      return 'row';\n    }\n    /**\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasWrap\",\n    value: function hasWrap(target) {\n      return this.styler.hasWrap(target);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @protected\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"applyStyleToElement\",\n    value: function applyStyleToElement(style, value) {\n      var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nativeElement;\n      this.styler.applyStyleToElement(element, style, value);\n    }\n    /**\n     * @protected\n     * @param {?} val\n     * @param {?} bp\n     * @return {?}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(val, bp) {\n      this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    /**\n     * @protected\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(input) {\n      if (this.currentValue !== input) {\n        this.addStyles(input);\n        this.currentValue = input;\n      }\n    }\n  }]);\n\n  return BaseDirective2;\n}();\n\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nBaseDirective2.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BaseDirective2,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n * @type {?}\n */\n\nvar DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/orientation-break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n\n/** @type {?} */\n\nvar HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\n/** @type {?} */\n\nvar HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\n/** @type {?} */\n\nvar TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\n/** @type {?} */\n\nvar TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\n/** @type {?} */\n\nvar WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\n\nvar WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\n\nvar ScreenTypes = {\n  'HANDSET': \"\".concat(HANDSET_PORTRAIT, \", \").concat(HANDSET_LANDSCAPE),\n  'TABLET': \"\".concat(TABLET_PORTRAIT, \" , \").concat(TABLET_LANDSCAPE),\n  'WEB': \"\".concat(WEB_PORTRAIT, \", \").concat(WEB_LANDSCAPE, \" \"),\n  'HANDSET_PORTRAIT': \"\".concat(HANDSET_PORTRAIT),\n  'TABLET_PORTRAIT': \"\".concat(TABLET_PORTRAIT, \" \"),\n  'WEB_PORTRAIT': \"\".concat(WEB_PORTRAIT),\n  'HANDSET_LANDSCAPE': \"\".concat(HANDSET_LANDSCAPE),\n  'TABLET_LANDSCAPE': \"\".concat(TABLET_LANDSCAPE),\n  'WEB_LANDSCAPE': \"\".concat(WEB_LANDSCAPE)\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n * @type {?}\n */\n\nvar ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/object-extend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\n\nfunction extendObject(dest) {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n    var source = _sources[_i];\n\n    if (source != null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/breakpoint-tools.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\n\nfunction firstUpperCase(part) {\n  /** @type {?} */\n  var first = part.length > 0 ? part.charAt(0) : '';\n  /** @type {?} */\n\n  var remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\n\n\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\n\n\nfunction validateSuffixes(list) {\n  list.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  function (bp) {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\n\n\nfunction mergeByAlias(defaults) {\n  var custom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  /** @type {?} */\n  var dict = {};\n  defaults.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  function (bp) {\n    dict[bp.alias] = bp;\n  }); // Merge custom breakpoints\n\n  custom.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  function (bp) {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(\n  /**\n  * @param {?} k\n  * @return {?}\n  */\n  function (k) {\n    return dict[k];\n  }));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-points-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n * @type {?}\n */\n\n\nvar BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    /** @type {?} */\n    var breakpoints = inject(BREAKPOINT);\n    /** @type {?} */\n\n    var layoutConfig = inject(LAYOUT_CONFIG);\n    /** @type {?} */\n\n    var bpFlattenArray = [].concat.apply([], (breakpoints || []).map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    function (v) {\n      return Array.isArray(v) ? v : [v];\n    }));\n    /** @type {?} */\n\n    var builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * HOF to sort the breakpoints by descending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\nfunction sortDescendingPriority(a, b) {\n  /** @type {?} */\n  var priorityA = a ? a.priority || 0 : 0;\n  /** @type {?} */\n\n  var priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/**\n * HOF to sort the breakpoints by ascending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction sortAscendingPriority(a, b) {\n  /** @type {?} */\n  var pA = a.priority || 0;\n  /** @type {?} */\n\n  var pB = b.priority || 0;\n  return pA - pB;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n\n\nvar BreakPointRegistry = /*#__PURE__*/function () {\n  /**\n   * @param {?} list\n   */\n  function BreakPointRegistry(list) {\n    _classCallCheck(this, BreakPointRegistry);\n\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = _toConsumableArray(list).sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   * @param {?} alias\n   * @return {?}\n   */\n\n\n  _createClass(BreakPointRegistry, [{\n    key: \"findByAlias\",\n    value: function findByAlias(alias) {\n      return !alias ? null : this.findWithPredicate(alias,\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      function (bp) {\n        return bp.alias == alias;\n      });\n    }\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"findByQuery\",\n    value: function findByQuery(query) {\n      return this.findWithPredicate(query,\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      function (bp) {\n        return bp.mediaQuery == query;\n      });\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlappings\",\n    get: function get() {\n      return this.items.filter(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      function (it) {\n        return it.overlapping == true;\n      });\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     * @return {?}\n     */\n\n  }, {\n    key: \"aliases\",\n    get: function get() {\n      return this.items.map(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      function (it) {\n        return it.alias;\n      });\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"suffixes\",\n    get: function get() {\n      return this.items.map(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      function (it) {\n        return !!it.suffix ? it.suffix : '';\n      });\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     * @private\n     * @param {?} key\n     * @param {?} searchFn\n     * @return {?}\n     */\n\n  }, {\n    key: \"findWithPredicate\",\n    value: function findWithPredicate(key, searchFn) {\n      /** @type {?} */\n      var response = this.findByMap.get(key);\n\n      if (!response) {\n        response = this.items.find(searchFn) || null;\n        this.findByMap.set(key, response);\n      }\n\n      return response || null;\n    }\n  }]);\n\n  return BreakPointRegistry;\n}();\n\nBreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) {\n  return new (t || BreakPointRegistry)(ɵngcc0.ɵɵinject(BREAKPOINTS));\n};\n/** @nocollapse */\n\n\nBreakPointRegistry.ɵprov = ɵɵdefineInjectable({\n  factory: function BreakPointRegistry_Factory() {\n    return new BreakPointRegistry(ɵɵinject(BREAKPOINTS));\n  },\n  token: BreakPointRegistry,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nBreakPointRegistry.ctorParameters = function () {\n  return [{\n    type: Array,\n    decorators: [{\n      type: Inject,\n      args: [BREAKPOINTS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n\n\nvar MatchMedia = /*#__PURE__*/function () {\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  function MatchMedia(_zone, _platformId, _document) {\n    _classCallCheck(this, MatchMedia);\n\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    /**\n     * Initialize source with 'all' so all non-responsive APIs trigger style updates\n     */\n\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   * @return {?}\n   */\n\n\n  _createClass(MatchMedia, [{\n    key: \"activations\",\n    get: function get() {\n      /** @type {?} */\n      var results = [];\n      this.registry.forEach(\n      /**\n      * @param {?} mql\n      * @param {?} key\n      * @return {?}\n      */\n      function (mql, key) {\n        if (mql.matches) {\n          results.push(key);\n        }\n      });\n      return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n\n  }, {\n    key: \"isActive\",\n    value: function isActive(mediaQuery) {\n      /** @type {?} */\n      var mql = this.registry.get(mediaQuery);\n      return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(\n      /**\n      * @param {?} m\n      * @return {?}\n      */\n      function (m) {\n        return m.matches;\n      });\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     * @param {?=} mqList\n     * @param {?=} filterOthers\n     * @return {?}\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(mqList) {\n      var _this3 = this;\n\n      var filterOthers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (mqList && mqList.length) {\n        /** @type {?} */\n        var matchMedia$ = this._observable$.pipe(filter(\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function (change) {\n          return !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1;\n        }));\n        /** @type {?} */\n\n\n        var registration$ = new Observable(\n        /**\n        * @param {?} observer\n        * @return {?}\n        */\n        function (observer) {\n          // tslint:disable-line:max-line-length\n\n          /** @type {?} */\n          var matches = _this3.registerQuery(mqList);\n\n          if (matches.length) {\n            /** @type {?} */\n            var lastChange =\n            /** @type {?} */\n            matches.pop();\n            matches.forEach(\n            /**\n            * @param {?} e\n            * @return {?}\n            */\n            function (e) {\n              observer.next(e);\n            });\n\n            _this3.source.next(lastChange); // last match is cached\n\n          }\n\n          observer.complete();\n        });\n        return merge(registration$, matchMedia$);\n      }\n\n      return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerQuery\",\n    value: function registerQuery(mediaQuery) {\n      var _this4 = this;\n\n      /** @type {?} */\n      var list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n      /** @type {?} */\n\n      var matches = [];\n      buildQueryCss(list, this._document);\n      list.forEach(\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      function (query) {\n        /** @type {?} */\n        var onMQLEvent =\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        function onMQLEvent(e) {\n          _this4._zone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this4.source.next(new MediaChange(e.matches, query));\n          });\n        };\n        /** @type {?} */\n\n\n        var mql = _this4.registry.get(query);\n\n        if (!mql) {\n          mql = _this4.buildMQL(query);\n          mql.addListener(onMQLEvent);\n\n          _this4.pendingRemoveListenerFns.push(\n          /**\n          * @return {?}\n          */\n          function () {\n            return (\n              /** @type {?} */\n              mql.removeListener(onMQLEvent)\n            );\n          });\n\n          _this4.registry.set(query, mql);\n        }\n\n        if (mql.matches) {\n          matches.push(new MediaChange(true, query));\n        }\n      });\n      return matches;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /** @type {?} */\n      var fn;\n\n      while (fn = this.pendingRemoveListenerFns.pop()) {\n        fn();\n      }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @protected\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"buildMQL\",\n    value: function buildMQL(query) {\n      return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n  }]);\n\n  return MatchMedia;\n}();\n\nMatchMedia.ɵfac = function MatchMedia_Factory(t) {\n  return new (t || MatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\n\n\nMatchMedia.ɵprov = ɵɵdefineInjectable({\n  factory: function MatchMedia_Factory() {\n    return new MatchMedia(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n  },\n  token: MatchMedia,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nMatchMedia.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n * @type {?}\n */\n\n\nvar ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param {?} mediaQueries\n * @param {?} _document\n * @return {?}\n */\n\nfunction buildQueryCss(mediaQueries, _document) {\n  /** @type {?} */\n  var list = mediaQueries.filter(\n  /**\n  * @param {?} it\n  * @return {?}\n  */\n  function (it) {\n    return !ALL_STYLES[it];\n  });\n\n  if (list.length > 0) {\n    /** @type {?} */\n    var query = list.join(', ');\n\n    try {\n      /** @type {?} */\n      var styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n\n      if (!\n      /** @type {?} */\n      styleEl.styleSheet) {\n        /** @type {?} */\n        var cssText = \"\\n/*\\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\\n  see http://bit.ly/2sd4HMP\\n*/\\n@media \".concat(query, \" {.fx-query-test{ }}\\n\");\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      /** @type {?} */\n      _document.head.appendChild(styleEl); // Store in private global registry\n\n\n      list.forEach(\n      /**\n      * @param {?} mq\n      * @return {?}\n      */\n      function (mq) {\n        return ALL_STYLES[mq] = styleEl;\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n/**\n * @param {?} query\n * @param {?} isBrowser\n * @return {?}\n */\n\n\nfunction constructMql(query, isBrowser) {\n  /** @type {?} */\n  var canListen = isBrowser && !!\n  /** @type {?} */\n  window.matchMedia('all').addListener;\n  return canListen ?\n  /** @type {?} */\n  window.matchMedia(query) :\n  /** @type {?} */\n  {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener:\n    /**\n    * @return {?}\n    */\n    function addListener() {},\n    removeListener:\n    /**\n    * @return {?}\n    */\n    function removeListener() {},\n    onchange: null,\n\n    /**\n     * @return {?}\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * @return {?}\n     */\n    removeEventListener: function removeEventListener() {},\n\n    /**\n     * @return {?}\n     */\n    dispatchEvent: function dispatchEvent() {\n      return false;\n    }\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/mock/mock-match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n\n\nvar MockMatchMedia = /*#__PURE__*/function (_MatchMedia) {\n  _inherits(MockMatchMedia, _MatchMedia);\n\n  var _super = _createSuper(MockMatchMedia);\n\n  // Allow fallback to overlapping mediaQueries\n\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   * @param {?} _breakpoints\n   */\n  function MockMatchMedia(_zone, _platformId, _document, _breakpoints) {\n    var _this5;\n\n    _classCallCheck(this, MockMatchMedia);\n\n    _this5 = _super.call(this, _zone, _platformId, _document);\n    _this5._breakpoints = _breakpoints;\n    _this5.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n    // Used for testing BreakPoint registrations\n\n    _this5.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n\n    return _this5;\n  }\n  /**\n   * Easy method to clear all listeners for all mediaQueries\n   * @return {?}\n   */\n\n\n  _createClass(MockMatchMedia, [{\n    key: \"clearAll\",\n    value: function clearAll() {\n      this.registry.forEach(\n      /**\n      * @param {?} mql\n      * @return {?}\n      */\n      function (mql) {\n        /** @type {?} */\n        mql.destroy();\n      });\n      this.registry.clear();\n      this.useOverlaps = false;\n    }\n    /**\n     * Feature to support manual, simulated activation of a mediaQuery.\n     * @param {?} mediaQuery\n     * @param {?=} useOverlaps\n     * @return {?}\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate(mediaQuery) {\n      var useOverlaps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      useOverlaps = useOverlaps || this.useOverlaps;\n      mediaQuery = this._validateQuery(mediaQuery);\n\n      if (useOverlaps || !this.isActive(mediaQuery)) {\n        this._deactivateAll();\n\n        this._registerMediaQuery(mediaQuery);\n\n        this._activateWithOverlaps(mediaQuery, useOverlaps);\n      }\n\n      return this.hasActivated;\n    }\n    /**\n     * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n     * @param {?} queryOrAlias\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validateQuery\",\n    value: function _validateQuery(queryOrAlias) {\n      /** @type {?} */\n      var bp = this._breakpoints.findByAlias(queryOrAlias);\n\n      return bp && bp.mediaQuery || queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     * @private\n     * @param {?} mediaQuery\n     * @param {?} useOverlaps\n     * @return {?}\n     */\n\n  }, {\n    key: \"_activateWithOverlaps\",\n    value: function _activateWithOverlaps(mediaQuery, useOverlaps) {\n      if (useOverlaps) {\n        /** @type {?} */\n        var bp = this._breakpoints.findByQuery(mediaQuery);\n        /** @type {?} */\n\n\n        var alias = bp ? bp.alias : 'unknown'; // Simulate activation of overlapping lt-<XXX> ranges\n\n        switch (alias) {\n          case 'lg':\n            this._activateByAlias(['lt-xl']);\n\n            break;\n\n          case 'md':\n            this._activateByAlias(['lt-xl', 'lt-lg']);\n\n            break;\n\n          case 'sm':\n            this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n\n            break;\n\n          case 'xs':\n            this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n\n            break;\n        } // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n\n\n        switch (alias) {\n          case 'xl':\n            this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n\n            break;\n\n          case 'lg':\n            this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n\n            break;\n\n          case 'md':\n            this._activateByAlias(['gt-sm', 'gt-xs']);\n\n            break;\n\n          case 'sm':\n            this._activateByAlias(['gt-xs']);\n\n            break;\n        }\n      } // Activate last since the responsiveActivation is watching *this* mediaQuery\n\n\n      return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     * @private\n     * @param {?} aliases\n     * @return {?}\n     */\n\n  }, {\n    key: \"_activateByAlias\",\n    value: function _activateByAlias(aliases) {\n      var _this6 = this;\n\n      /** @type {?} */\n      var activate =\n      /**\n      * @param {?} alias\n      * @return {?}\n      */\n      function activate(alias) {\n        /** @type {?} */\n        var bp = _this6._breakpoints.findByAlias(alias);\n\n        _this6._activateByQuery(bp ? bp.mediaQuery : alias);\n      };\n\n      aliases.forEach(activate);\n    }\n    /**\n     *\n     * @private\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n\n  }, {\n    key: \"_activateByQuery\",\n    value: function _activateByQuery(mediaQuery) {\n      if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n        this._registerMediaQuery(mediaQuery);\n      }\n      /** @type {?} */\n\n\n      var mql =\n      /** @type {?} */\n      this.registry.get(mediaQuery);\n\n      if (mql && !this.isActive(mediaQuery)) {\n        this.registry.set(mediaQuery, mql.activate());\n      }\n\n      return this.hasActivated;\n    }\n    /**\n     * Deactivate all current MQLs and reset the buffer\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"_deactivateAll\",\n    value: function _deactivateAll() {\n      /** @type {?} */\n      this.registry.forEach(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      function (it) {\n        /** @type {?} */\n        it.deactivate();\n      });\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Insure the mediaQuery is registered with MatchMedia\n     * @private\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerMediaQuery\",\n    value: function _registerMediaQuery(mediaQuery) {\n      if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n        this.registerQuery(mediaQuery);\n      }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @protected\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"buildMQL\",\n    value: function buildMQL(query) {\n      return new MockMediaQueryList(query);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasActivated\",\n    get: function get() {\n      return this.activations.length > 0;\n    }\n  }]);\n\n  return MockMatchMedia;\n}(MatchMedia);\n\nMockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) {\n  return new (t || MockMatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(BreakPointRegistry));\n};\n\nMockMatchMedia.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MockMatchMedia,\n  factory: MockMatchMedia.ɵfac\n});\n/** @nocollapse */\n\nMockMatchMedia.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: BreakPointRegistry\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  }, null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\n\n\nvar MockMediaQueryList = /*#__PURE__*/function () {\n  /**\n   * @param {?} _mediaQuery\n   */\n  function MockMediaQueryList(_mediaQuery) {\n    _classCallCheck(this, MockMediaQueryList);\n\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MockMediaQueryList, [{\n    key: \"matches\",\n    get: function get() {\n      return this._isActive;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"media\",\n    get: function get() {\n      return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.deactivate();\n      this._listeners = [];\n    }\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _this7 = this;\n\n      if (!this._isActive) {\n        this._isActive = true;\n\n        this._listeners.forEach(\n        /**\n        * @param {?} callback\n        * @return {?}\n        */\n        function (callback) {\n          /** @type {?} */\n          var cb =\n          /** @type {?} */\n          callback;\n          cb.call(_this7,\n          /** @type {?} */\n          {\n            matches: _this7.matches,\n            media: _this7.media\n          });\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      var _this8 = this;\n\n      if (this._isActive) {\n        this._isActive = false;\n\n        this._listeners.forEach(\n        /**\n        * @param {?} callback\n        * @return {?}\n        */\n        function (callback) {\n          /** @type {?} */\n          var cb =\n          /** @type {?} */\n          callback;\n          cb.call(_this8,\n          /** @type {?} */\n          {\n            matches: _this8.matches,\n            media: _this8.media\n          });\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      if (this._listeners.indexOf(listener) === -1) {\n        this._listeners.push(listener);\n      }\n\n      if (this._isActive) {\n        /** @type {?} */\n        var cb =\n        /** @type {?} */\n        listener;\n        cb.call(this,\n        /** @type {?} */\n        {\n          matches: this.matches,\n          media: this.media\n        });\n      }\n    }\n    /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(_) {}\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(_, __, ___) {}\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(_, __, ___) {}\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(_) {\n      return false;\n    }\n  }]);\n\n  return MockMediaQueryList;\n}();\n/**\n * Pre-configured provider for MockMatchMedia\n * @type {?}\n */\n\n\nvar MockMatchMediaProvider = {\n  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/print-hook.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar PRINT = 'print';\n/** @type {?} */\n\nvar BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n\nvar PrintHook = /*#__PURE__*/function () {\n  /**\n   * @param {?} breakpoints\n   * @param {?} layoutConfig\n   * @param {?} _document\n   */\n  function PrintHook(breakpoints, layoutConfig, _document) {\n    _classCallCheck(this, PrintHook);\n\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document; // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n\n    this.registeredBeforeAfterPrintHooks = false; // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    /**\n     * Is this service currently in Print-mode ?\n     */\n\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /**\n   * Add 'print' mediaQuery: to listen for matchMedia activations\n   * @param {?} queries\n   * @return {?}\n   */\n\n\n  _createClass(PrintHook, [{\n    key: \"withPrintQuery\",\n    value: function withPrintQuery(queries) {\n      return [].concat(_toConsumableArray(queries), [PRINT]);\n    }\n    /**\n     * Is the MediaChange event for any 'print' \\@media\n     * @param {?} e\n     * @return {?}\n     */\n\n  }, {\n    key: \"isPrintEvent\",\n    value: function isPrintEvent(e) {\n      return e.mediaQuery.startsWith(PRINT);\n    }\n    /**\n     * What is the desired mqAlias to use while printing?\n     * @return {?}\n     */\n\n  }, {\n    key: \"printAlias\",\n    get: function get() {\n      return this.layoutConfig.printWithBreakpoints || [];\n    }\n    /**\n     * Lookup breakpoints associated with print aliases.\n     * @return {?}\n     */\n\n  }, {\n    key: \"printBreakPoints\",\n    get: function get() {\n      var _this9 = this;\n\n      return (\n        /** @type {?} */\n        this.printAlias.map(\n        /**\n        * @param {?} alias\n        * @return {?}\n        */\n        function (alias) {\n          return _this9.breakpoints.findByAlias(alias);\n        }).filter(\n        /**\n        * @param {?} bp\n        * @return {?}\n        */\n        function (bp) {\n          return bp !== null;\n        })\n      );\n    }\n    /**\n     * Lookup breakpoint associated with mediaQuery\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"getEventBreakpoints\",\n    value: function getEventBreakpoints(_ref) {\n      var mediaQuery = _ref.mediaQuery;\n\n      /** @type {?} */\n      var bp = this.breakpoints.findByQuery(mediaQuery);\n      /** @type {?} */\n\n      var list = bp ? [].concat(_toConsumableArray(this.printBreakPoints), [bp]) : this.printBreakPoints;\n      return list.sort(sortDescendingPriority);\n    }\n    /**\n     * Update event with printAlias mediaQuery information\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent(event) {\n      /** @type {?} */\n      var bp = this.breakpoints.findByQuery(event.mediaQuery);\n\n      if (this.isPrintEvent(event)) {\n        // Reset from 'print' to first (highest priority) print breakpoint\n        bp = this.getEventBreakpoints(event)[0];\n        event.mediaQuery = bp ? bp.mediaQuery : '';\n      }\n\n      return mergeAlias(event, bp);\n    } // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n\n    /**\n     * @private\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerBeforeAfterPrintHooks\",\n    value: function registerBeforeAfterPrintHooks(target) {\n      var _this10 = this;\n\n      // `defaultView` may be null when rendering on the server or in other contexts.\n      if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n        return;\n      }\n\n      this.registeredBeforeAfterPrintHooks = true;\n      /** @type {?} */\n\n      var beforePrintListener =\n      /**\n      * @return {?}\n      */\n      function beforePrintListener() {\n        // If we aren't already printing, start printing and update the styles as\n        // if there was a regular print `MediaChange`(from matchMedia).\n        if (!_this10.isPrinting) {\n          _this10.isPrintingBeforeAfterEvent = true;\n\n          _this10.startPrinting(target, _this10.getEventBreakpoints(new MediaChange(true, PRINT)));\n\n          target.updateStyles();\n        }\n      };\n      /** @type {?} */\n\n\n      var afterPrintListener =\n      /**\n      * @return {?}\n      */\n      function afterPrintListener() {\n        // If we aren't already printing, start printing and update the styles as\n        // if there was a regular print `MediaChange`(from matchMedia).\n        _this10.isPrintingBeforeAfterEvent = false;\n\n        if (_this10.isPrinting) {\n          _this10.stopPrinting(target);\n\n          target.updateStyles();\n        }\n      }; // Could we have teardown logic to remove if there are no print listeners being used?\n\n\n      this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n\n      this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n\n      this.beforePrintEventListeners.push(beforePrintListener);\n      this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS filter operator with partial application\n     * @param {?} target\n     * @return {?} pipeable filter predicate\n     */\n\n  }, {\n    key: \"interceptEvents\",\n    value: function interceptEvents(target) {\n      var _this11 = this;\n\n      this.registerBeforeAfterPrintHooks(target);\n      return (\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function (event) {\n          if (_this11.isPrintEvent(event)) {\n            if (event.matches && !_this11.isPrinting) {\n              _this11.startPrinting(target, _this11.getEventBreakpoints(event));\n\n              target.updateStyles();\n            } else if (!event.matches && _this11.isPrinting && !_this11.isPrintingBeforeAfterEvent) {\n              _this11.stopPrinting(target);\n\n              target.updateStyles();\n            }\n          } else {\n            _this11.collectActivations(event);\n          }\n        }\n      );\n    }\n    /**\n     * Stop mediaChange event propagation in event streams\n     * @return {?}\n     */\n\n  }, {\n    key: \"blockPropagation\",\n    value: function blockPropagation() {\n      var _this12 = this;\n\n      return (\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function (event) {\n          return !(_this12.isPrinting || _this12.isPrintEvent(event));\n        }\n      );\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     * @protected\n     * @param {?} target\n     * @param {?} bpList\n     * @return {?}\n     */\n\n  }, {\n    key: \"startPrinting\",\n    value: function startPrinting(target, bpList) {\n      this.isPrinting = true;\n      target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /**\n     * For any print de-activations, reset the entire print queue\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopPrinting\",\n    value: function stopPrinting(target) {\n      target.activatedBreakpoints = this.deactivations;\n      this.deactivations = [];\n      this.queue.clear();\n      this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"collectActivations\",\n    value: function collectActivations(event) {\n      if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n        if (!event.matches) {\n          /** @type {?} */\n          var bp = this.breakpoints.findByQuery(event.mediaQuery);\n\n          if (bp) {\n            // Deactivating a breakpoint\n            this.deactivations.push(bp);\n            this.deactivations.sort(sortDescendingPriority);\n          }\n        } else if (!this.isPrintingBeforeAfterEvent) {\n          // Only clear deactivations if we aren't printing from a `beforeprint` event.\n          // Otherwise this will clear before `stopPrinting()` is called to restore\n          // the pre-Print Activations.\n          this.deactivations = [];\n        }\n      }\n    }\n    /**\n     * Teardown logic for the service.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this13 = this;\n\n      this.beforePrintEventListeners.forEach(\n      /**\n      * @param {?} l\n      * @return {?}\n      */\n      function (l) {\n        return _this13._document.defaultView.removeEventListener('beforeprint', l);\n      });\n      this.afterPrintEventListeners.forEach(\n      /**\n      * @param {?} l\n      * @return {?}\n      */\n      function (l) {\n        return _this13._document.defaultView.removeEventListener('afterprint', l);\n      });\n    }\n  }]);\n\n  return PrintHook;\n}();\n\nPrintHook.ɵfac = function PrintHook_Factory(t) {\n  return new (t || PrintHook)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\n\n\nPrintHook.ɵprov = ɵɵdefineInjectable({\n  factory: function PrintHook_Factory() {\n    return new PrintHook(ɵɵinject(BreakPointRegistry), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(DOCUMENT));\n  },\n  token: PrintHook,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nPrintHook.ctorParameters = function () {\n  return [{\n    type: BreakPointRegistry\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PrintHook, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})(); // ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\n\n\nvar PrintQueue = /*#__PURE__*/function () {\n  function PrintQueue() {\n    _classCallCheck(this, PrintQueue);\n\n    /**\n     * Sorted queue with prioritized print breakpoints\n     */\n    this.printBreakpoints = [];\n  }\n  /**\n   * @param {?} bpList\n   * @return {?}\n   */\n\n\n  _createClass(PrintQueue, [{\n    key: \"addPrintBreakpoints\",\n    value: function addPrintBreakpoints(bpList) {\n      var _this14 = this;\n\n      bpList.push(BREAKPOINT_PRINT);\n      bpList.sort(sortDescendingPriority);\n      bpList.forEach(\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      function (bp) {\n        return _this14.addBreakpoint(bp);\n      });\n      return this.printBreakpoints;\n    }\n    /**\n     * Add Print breakpoint to queue\n     * @param {?} bp\n     * @return {?}\n     */\n\n  }, {\n    key: \"addBreakpoint\",\n    value: function addBreakpoint(bp) {\n      if (!!bp) {\n        /** @type {?} */\n        var bpInList = this.printBreakpoints.find(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return it.mediaQuery === bp.mediaQuery;\n        });\n\n        if (bpInList === undefined) {\n          // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n          // register as highest priority in the queue\n          this.printBreakpoints = isPrintBreakPoint(bp) ? [bp].concat(_toConsumableArray(this.printBreakpoints)) : [].concat(_toConsumableArray(this.printBreakpoints), [bp]);\n        }\n      }\n    }\n    /**\n     * Restore original activated breakpoints and clear internal caches\n     * @return {?}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.printBreakpoints = [];\n    }\n  }]);\n\n  return PrintQueue;\n}(); // ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/**\n * Only support intercept queueing if the Breakpoint is a print \\@media query\n * @param {?} bp\n * @return {?}\n */\n\n\nfunction isPrintBreakPoint(bp) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/array.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/media-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n * \\@usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n\n\nvar MediaObserver = /*#__PURE__*/function () {\n  /**\n   * @param {?} breakpoints\n   * @param {?} matchMedia\n   * @param {?} hook\n   */\n  function MediaObserver(breakpoints, matchMedia, hook) {\n    _classCallCheck(this, MediaObserver);\n\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /**\n     * Filter MediaChange notifications for overlapping breakpoints\n     */\n\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    function (changes) {\n      return changes.length > 0;\n    }), map(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    function (changes) {\n      return changes[0];\n    }));\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   * @return {?}\n   */\n\n\n  _createClass(MediaObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed$.next();\n      this.destroyed$.complete();\n    } // ************************************************\n    // Public Methods\n    // ************************************************\n\n    /**\n     * Observe changes to current activation 'list'\n     * @return {?}\n     */\n\n  }, {\n    key: \"asObservable\",\n    value: function asObservable() {\n      return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param {?} value One or more media queries (or aliases) to check.\n     * @return {?} Whether any of the media queries match.\n     */\n\n  }, {\n    key: \"isActive\",\n    value: function isActive(value) {\n      var _this15 = this;\n\n      /** @type {?} */\n      var aliases = splitQueries(coerceArray(value));\n      return aliases.some(\n      /**\n      * @param {?} alias\n      * @return {?}\n      */\n      function (alias) {\n        /** @type {?} */\n        var query = toMediaQuery(alias, _this15.breakpoints);\n        return query !== null && _this15.matchMedia.isActive(query);\n      });\n    } // ************************************************\n    // Internal Methods\n    // ************************************************\n\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"watchActivations\",\n    value: function watchActivations() {\n      /** @type {?} */\n      var queries = this.breakpoints.items.map(\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      function (bp) {\n        return bp.mediaQuery;\n      });\n      return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     * @private\n     * @param {?} mqList\n     * @return {?}\n     */\n\n  }, {\n    key: \"buildObservable\",\n    value: function buildObservable(mqList) {\n      var _this16 = this;\n\n      /** @type {?} */\n      var hasChanges =\n      /**\n      * @param {?} changes\n      * @return {?}\n      */\n      function hasChanges(changes) {\n        /** @type {?} */\n        var isValidQuery =\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function isValidQuery(change) {\n          return change.mediaQuery.length > 0;\n        };\n\n        return changes.filter(isValidQuery).length > 0;\n      };\n      /** @type {?} */\n\n\n      var excludeOverlaps =\n      /**\n      * @param {?} changes\n      * @return {?}\n      */\n      function excludeOverlaps(changes) {\n        return !_this16.filterOverlaps ? changes : changes.filter(\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function (change) {\n          /** @type {?} */\n          var bp = _this16.breakpoints.findByQuery(change.mediaQuery);\n\n          return !bp ? true : !bp.overlapping;\n        });\n      };\n      /**\n       */\n\n\n      return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      function (change) {\n        return change.matches;\n      }), debounceTime(0, asapScheduler), switchMap(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      function (_) {\n        return of(_this16.findAllActivations());\n      }), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"findAllActivations\",\n    value: function findAllActivations() {\n      var _this17 = this;\n\n      /** @type {?} */\n      var mergeMQAlias =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      function mergeMQAlias(change) {\n        /** @type {?} */\n        var bp = _this17.breakpoints.findByQuery(change.mediaQuery);\n\n        return mergeAlias(change, bp);\n      };\n      /** @type {?} */\n\n\n      var replaceWithPrintAlias =\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      function replaceWithPrintAlias(change) {\n        return _this17.hook.isPrintEvent(change) ? _this17.hook.updateEvent(change) : change;\n      };\n\n      return this.matchMedia.activations.map(\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      function (query) {\n        return new MediaChange(true, query);\n      }).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n    }\n  }]);\n\n  return MediaObserver;\n}();\n\nMediaObserver.ɵfac = function MediaObserver_Factory(t) {\n  return new (t || MediaObserver)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(PrintHook));\n};\n/** @nocollapse */\n\n\nMediaObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaObserver_Factory() {\n    return new MediaObserver(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(PrintHook));\n  },\n  token: MediaObserver,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nMediaObserver.ctorParameters = function () {\n  return [{\n    type: BreakPointRegistry\n  }, {\n    type: MatchMedia\n  }, {\n    type: PrintHook\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * Find associated breakpoint (if any)\n * @param {?} query\n * @param {?} locator\n * @return {?}\n */\n\n\nfunction toMediaQuery(query, locator) {\n  /** @type {?} */\n  var bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  function (query) {\n    return query.split(',');\n  }).reduce(\n  /**\n  * @param {?} a1\n  * @param {?} a2\n  * @return {?}\n  */\n  function (a1, a2) {\n    return a1.concat(a2);\n  }).map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  function (query) {\n    return query.trim();\n  });\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/media-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class\n */\n\n\nvar MediaTrigger = /*#__PURE__*/function () {\n  /**\n   * @param {?} breakpoints\n   * @param {?} matchMedia\n   * @param {?} layoutConfig\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  function MediaTrigger(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    _classCallCheck(this, MediaTrigger);\n\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param {?} list array of mediaQuery or alias strings\n   * @return {?}\n   */\n\n\n  _createClass(MediaTrigger, [{\n    key: \"activate\",\n    value: function activate(list) {\n      list = list.map(\n      /**\n      * @param {?} it\n      * @return {?}\n      */\n      function (it) {\n        return it.trim();\n      }); // trim queries\n\n      this.saveActivations();\n      this.deactivateAll();\n      this.setActivations(list);\n      this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     * @return {?}\n     */\n\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      if (this.hasCachedRegistryMatches) {\n        /** @type {?} */\n        var extractQuery =\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function extractQuery(change) {\n          return change.mediaQuery;\n        };\n        /** @type {?} */\n\n\n        var list = this.originalActivations.map(extractQuery);\n\n        try {\n          this.deactivateAll();\n          this.restoreRegistryMatches();\n          this.setActivations(list);\n        } finally {\n          this.originalActivations = [];\n\n          if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n          }\n        }\n      }\n    } // ************************************************\n    // Internal Methods\n    // ************************************************\n\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"prepareAutoRestore\",\n    value: function prepareAutoRestore() {\n      /** @type {?} */\n      var isBrowser = isPlatformBrowser(this._platformId) && this._document;\n      /** @type {?} */\n\n\n      var enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n\n      if (enableAutoRestore) {\n        /** @type {?} */\n        var resize$ = fromEvent(window, 'resize').pipe(take(1));\n        this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n      }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      /** @type {?} */\n      var list = this.currentActivations;\n      this.forceRegistryMatches(list, false);\n      this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"saveActivations\",\n    value: function saveActivations() {\n      var _this18 = this;\n\n      if (!this.hasCachedRegistryMatches) {\n        /** @type {?} */\n        var toMediaChange =\n        /**\n        * @param {?} query\n        * @return {?}\n        */\n        function toMediaChange(query) {\n          return new MediaChange(true, query);\n        };\n        /** @type {?} */\n\n\n        var mergeMQAlias =\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function mergeMQAlias(change) {\n          /** @type {?} */\n          var bp = _this18.breakpoints.findByQuery(change.mediaQuery);\n\n          return mergeAlias(change, bp);\n        };\n\n        this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n        this.cacheRegistryMatches();\n      }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     * @private\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"setActivations\",\n    value: function setActivations(list) {\n      if (!!this.originalRegistry) {\n        this.forceRegistryMatches(list, true);\n      }\n\n      this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     * @private\n     * @param {?} queries\n     * @param {?=} matches\n     * @return {?}\n     */\n\n  }, {\n    key: \"simulateMediaChanges\",\n    value: function simulateMediaChanges(queries) {\n      var _this19 = this;\n\n      var matches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      /** @type {?} */\n      var toMediaQuery =\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      function toMediaQuery(query) {\n        /** @type {?} */\n        var locator = _this19.breakpoints;\n        /** @type {?} */\n\n        var bp = locator.findByAlias(query) || locator.findByQuery(query);\n        return bp ? bp.mediaQuery : query;\n      };\n      /** @type {?} */\n\n\n      var emitChangeEvent =\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      function emitChangeEvent(query) {\n        return _this19.emitChangeEvent(matches, query);\n      };\n\n      queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     * @private\n     * @param {?} queries\n     * @param {?} matches\n     * @return {?}\n     */\n\n  }, {\n    key: \"forceRegistryMatches\",\n    value: function forceRegistryMatches(queries, matches) {\n      /** @type {?} */\n      var registry = new Map();\n      queries.forEach(\n      /**\n      * @param {?} query\n      * @return {?}\n      */\n      function (query) {\n        registry.set(query,\n        /** @type {?} */\n        {\n          matches: matches\n        });\n      });\n      this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"cacheRegistryMatches\",\n    value: function cacheRegistryMatches() {\n      /** @type {?} */\n      var target = this.originalRegistry;\n      target.clear();\n      this.matchMedia.registry.forEach(\n      /**\n      * @param {?} value\n      * @param {?} key\n      * @return {?}\n      */\n      function (value, key) {\n        target.set(key, value);\n      });\n      this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"restoreRegistryMatches\",\n    value: function restoreRegistryMatches() {\n      /** @type {?} */\n      var target = this.matchMedia.registry;\n      target.clear();\n      this.originalRegistry.forEach(\n      /**\n      * @param {?} value\n      * @param {?} key\n      * @return {?}\n      */\n      function (value, key) {\n        target.set(key, value);\n      });\n      this.originalRegistry.clear();\n      this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     * @private\n     * @param {?} matches\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"emitChangeEvent\",\n    value: function emitChangeEvent(matches, query) {\n      this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"currentActivations\",\n    get: function get() {\n      return this.matchMedia.activations;\n    }\n  }]);\n\n  return MediaTrigger;\n}();\n\nMediaTrigger.ɵfac = function MediaTrigger_Factory(t) {\n  return new (t || MediaTrigger)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\n\n\nMediaTrigger.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaTrigger_Factory() {\n    return new MediaTrigger(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n  },\n  token: MediaTrigger,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nMediaTrigger.ctorParameters = function () {\n  return [{\n    type: BreakPointRegistry\n  }, {\n    type: MatchMedia\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaTrigger, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/auto-prefixer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\n\n\nfunction applyCssPrefixes(target) {\n  for (var key in target) {\n    /** @type {?} */\n    var value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = ['-webkit-flex', 'flex'];\n        } else if (value === 'inline-flex') {\n          target['display'] = ['-webkit-inline-flex', 'inline-flex'];\n        } else {\n          target['display'] = value;\n        }\n\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n\n  return target;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-utils/style-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StyleUtils = /*#__PURE__*/function () {\n  /**\n   * @param {?} _serverStylesheet\n   * @param {?} _serverModuleLoaded\n   * @param {?} _platformId\n   * @param {?} layoutConfig\n   */\n  function StyleUtils(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    _classCallCheck(this, StyleUtils);\n\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @param {?} element\n   * @param {?} style\n   * @param {?=} value\n   * @return {?}\n   */\n\n\n  _createClass(StyleUtils, [{\n    key: \"applyStyleToElement\",\n    value: function applyStyleToElement(element, style) {\n      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      /** @type {?} */\n      var styles = {};\n\n      if (typeof style === 'string') {\n        styles[style] = value;\n        style = styles;\n      }\n\n      styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n\n      this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?=} elements\n     * @return {?}\n     */\n\n  }, {\n    key: \"applyStyleToElements\",\n    value: function applyStyleToElements(style) {\n      var _this20 = this;\n\n      var elements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      /** @type {?} */\n      var styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n      elements.forEach(\n      /**\n      * @param {?} el\n      * @return {?}\n      */\n      function (el) {\n        _this20._applyMultiValueStyleToElement(styles, el);\n      });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFlowDirection\",\n    value: function getFlowDirection(target) {\n      /** @type {?} */\n      var query = 'flex-direction';\n      /** @type {?} */\n\n      var value = this.lookupStyle(target, query);\n      /** @type {?} */\n\n      var hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n      return [value || 'row', hasInlineValue];\n    }\n    /**\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasWrap\",\n    value: function hasWrap(target) {\n      /** @type {?} */\n      var query = 'flex-wrap';\n      return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n\n  }, {\n    key: \"lookupAttributeValue\",\n    value: function lookupAttributeValue(element, attribute) {\n      return element.getAttribute(attribute) || '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n\n  }, {\n    key: \"lookupInlineStyle\",\n    value: function lookupInlineStyle(element, styleName) {\n      return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} inlineOnly\n     * @return {?}\n     */\n\n  }, {\n    key: \"lookupStyle\",\n    value: function lookupStyle(element, styleName) {\n      var inlineOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      /** @type {?} */\n      var value = '';\n\n      if (element) {\n        /** @type {?} */\n        var immediateValue = value = this.lookupInlineStyle(element, styleName);\n\n        if (!immediateValue) {\n          if (isPlatformBrowser(this._platformId)) {\n            if (!inlineOnly) {\n              value = getComputedStyle(element).getPropertyValue(styleName);\n            }\n          } else {\n            if (this._serverModuleLoaded) {\n              value = this._serverStylesheet.getStyleForElement(element, styleName);\n            }\n          }\n        }\n      } // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n      //       in which case getComputedStyle() should determine a valid value.\n\n\n      return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     * @private\n     * @param {?} styles\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyMultiValueStyleToElement\",\n    value: function _applyMultiValueStyleToElement(styles, element) {\n      var _this21 = this;\n\n      Object.keys(styles).sort().forEach(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      function (key) {\n        /** @type {?} */\n        var el = styles[key];\n        /** @type {?} */\n\n        var values = Array.isArray(el) ? el : [el];\n        values.sort();\n\n        var _iterator = _createForOfIteratorHelper(values),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var value = _step.value;\n            value = value ? value + '' : '';\n\n            if (isPlatformBrowser(_this21._platformId) || !_this21._serverModuleLoaded) {\n              isPlatformBrowser(_this21._platformId) ? element.style.setProperty(key, value) : _this21._setServerStyle(element, key, value);\n            } else {\n              _this21._serverStylesheet.addStyleToElement(element, key, value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setServerStyle\",\n    value: function _setServerStyle(element, styleName, styleValue) {\n      styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n      /** @type {?} */\n\n      var styleMap = this._readStyleAttribute(element);\n\n      styleMap[styleName] = styleValue || '';\n\n      this._writeStyleAttribute(element, styleMap);\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getServerStyle\",\n    value: function _getServerStyle(element, styleName) {\n      /** @type {?} */\n      var styleMap = this._readStyleAttribute(element);\n\n      return styleMap[styleName] || '';\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_readStyleAttribute\",\n    value: function _readStyleAttribute(element) {\n      /** @type {?} */\n      var styleMap = {};\n      /** @type {?} */\n\n      var styleAttribute = element.getAttribute('style');\n\n      if (styleAttribute) {\n        /** @type {?} */\n        var styleList = styleAttribute.split(/;+/g);\n\n        for (var i = 0; i < styleList.length; i++) {\n          /** @type {?} */\n          var style = styleList[i].trim();\n\n          if (style.length > 0) {\n            /** @type {?} */\n            var colonIndex = style.indexOf(':');\n\n            if (colonIndex === -1) {\n              throw new Error(\"Invalid CSS style: \".concat(style));\n            }\n            /** @type {?} */\n\n\n            var name = style.substr(0, colonIndex).trim();\n            styleMap[name] = style.substr(colonIndex + 1).trim();\n          }\n        }\n      }\n\n      return styleMap;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} styleMap\n     * @return {?}\n     */\n\n  }, {\n    key: \"_writeStyleAttribute\",\n    value: function _writeStyleAttribute(element, styleMap) {\n      /** @type {?} */\n      var styleAttrValue = '';\n\n      for (var key in styleMap) {\n        /** @type {?} */\n        var newValue = styleMap[key];\n\n        if (newValue) {\n          styleAttrValue += key + ':' + styleMap[key] + ';';\n        }\n      }\n\n      element.setAttribute('style', styleAttrValue);\n    }\n  }]);\n\n  return StyleUtils;\n}();\n\nStyleUtils.ɵfac = function StyleUtils_Factory(t) {\n  return new (t || StyleUtils)(ɵngcc0.ɵɵinject(StylesheetMap), ɵngcc0.ɵɵinject(SERVER_TOKEN), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LAYOUT_CONFIG));\n};\n/** @nocollapse */\n\n\nStyleUtils.ɵprov = ɵɵdefineInjectable({\n  factory: function StyleUtils_Factory() {\n    return new StyleUtils(ɵɵinject(StylesheetMap), ɵɵinject(SERVER_TOKEN), ɵɵinject(PLATFORM_ID), ɵɵinject(LAYOUT_CONFIG));\n  },\n  token: StyleUtils,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nStyleUtils.ctorParameters = function () {\n  return [{\n    type: StylesheetMap\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [SERVER_TOKEN]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StylesheetMap\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-builder/style-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A class that encapsulates CSS style generation for common directives\n * @abstract\n */\n\n\nvar StyleBuilder = /*#__PURE__*/function () {\n  function StyleBuilder() {\n    _classCallCheck(this, StyleBuilder);\n\n    /**\n     * Whether to cache the generated output styles\n     */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   * @param {?} _input\n   * @param {?} _styles\n   * @param {?=} _parent\n   * @return {?}\n   */\n\n\n  _createClass(StyleBuilder, [{\n    key: \"sideEffect\",\n    value: function sideEffect(_input, _styles, _parent) {}\n  }]);\n\n  return StyleBuilder;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/basis-validator/basis-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\n\n\nfunction validateBasis(basis) {\n  var grow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n  var shrink = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1';\n\n  /** @type {?} */\n  var parts = [grow, shrink, basis];\n  /** @type {?} */\n\n  var j = basis.indexOf('calc');\n\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    /** @type {?} */\n\n    var matches = basis.substr(0, j).trim().split(' ');\n\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    /** @type {?} */\n    var _matches = basis.split(' ');\n\n    parts = _matches.length === 3 ? _matches : [grow, shrink, basis];\n  }\n\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\n\n\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/media-marshaller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n\n\nvar MediaMarshaller = /*#__PURE__*/function () {\n  /**\n   * @param {?} matchMedia\n   * @param {?} breakpoints\n   * @param {?} hook\n   */\n  function MediaMarshaller(matchMedia, breakpoints, hook) {\n    _classCallCheck(this, MediaMarshaller);\n\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this.activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n    // special triggers to update elements\n\n    this.updateMap = new WeakMap(); // callback functions to update styles\n    // callback functions to update styles\n\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n    // callback functions to clear styles\n\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MediaMarshaller, [{\n    key: \"activatedAlias\",\n    get: function get() {\n      return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param {?} mc\n     * @return {?}\n     */\n\n  }, {\n    key: \"onMediaChange\",\n    value: function onMediaChange(mc) {\n      /** @type {?} */\n      var bp = this.findByQuery(mc.mediaQuery);\n\n      if (bp) {\n        mc = mergeAlias(mc, bp);\n\n        if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n          this.activatedBreakpoints.push(bp);\n          this.activatedBreakpoints.sort(sortDescendingPriority);\n          this.updateStyles();\n        } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n          // Remove the breakpoint when it's deactivated\n          this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n          this.activatedBreakpoints.sort(sortDescendingPriority);\n          this.updateStyles();\n        }\n      }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param {?} element\n     * @param {?} key\n     * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     * @return {?}\n     */\n\n  }, {\n    key: \"init\",\n    value: function init(element, key, updateFn, clearFn) {\n      var extraTriggers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n      initBuilderMap(this.updateMap, element, key, updateFn);\n      initBuilderMap(this.clearMap, element, key, clearFn);\n      this.buildElementKeyMap(element, key);\n      this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param {?} element\n     * @param {?} key\n     * @param {?=} bp\n     * @return {?}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(element, key, bp) {\n      /** @type {?} */\n      var bpMap = this.elementMap.get(element);\n\n      if (bpMap) {\n        /** @type {?} */\n        var values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n\n        if (values) {\n          return values.get(key);\n        }\n      }\n\n      return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(element, key) {\n      /** @type {?} */\n      var bpMap = this.elementMap.get(element);\n\n      if (bpMap) {\n        /** @type {?} */\n        var values = this.getActivatedValues(bpMap, key);\n\n        if (values) {\n          return values.get(key) !== undefined || false;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param {?} element the element in question\n     * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param {?} val the value for the breakpoint\n     * @param {?} bp the breakpoint suffix (empty string = default)\n     * @return {?}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(element, key, val, bp) {\n      /** @type {?} */\n      var bpMap = this.elementMap.get(element);\n\n      if (!bpMap) {\n        bpMap = new Map().set(bp, new Map().set(key, val));\n        this.elementMap.set(element, bpMap);\n      } else {\n        /** @type {?} */\n        var values = (bpMap.get(bp) || new Map()).set(key, val);\n        bpMap.set(bp, values);\n        this.elementMap.set(element, bpMap);\n      }\n      /** @type {?} */\n\n\n      var value = this.getValue(element, key);\n\n      if (value !== undefined) {\n        this.updateElement(element, key, value);\n      }\n    }\n    /**\n     * Track element value changes for a specific key\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"trackValue\",\n    value: function trackValue(element, key) {\n      return this.subject.asObservable().pipe(filter(\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {\n        return v.element === element && v.key === key;\n      }));\n    }\n    /**\n     * update all styles for all elements on the current breakpoint\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateStyles\",\n    value: function updateStyles() {\n      var _this22 = this;\n\n      this.elementMap.forEach(\n      /**\n      * @param {?} bpMap\n      * @param {?} el\n      * @return {?}\n      */\n      function (bpMap, el) {\n        /** @type {?} */\n        var keyMap = new Set(\n        /** @type {?} */\n        _this22.elementKeyMap.get(el));\n        /** @type {?} */\n\n        var valueMap = _this22.getActivatedValues(bpMap);\n\n        if (valueMap) {\n          valueMap.forEach(\n          /**\n          * @param {?} v\n          * @param {?} k\n          * @return {?}\n          */\n          function (v, k) {\n            _this22.updateElement(el, k, v);\n\n            keyMap.delete(k);\n          });\n        }\n\n        keyMap.forEach(\n        /**\n        * @param {?} k\n        * @return {?}\n        */\n        function (k) {\n          valueMap = _this22.getActivatedValues(bpMap, k);\n\n          if (valueMap) {\n            /** @type {?} */\n            var value = valueMap.get(k);\n\n            _this22.updateElement(el, k, value);\n          } else {\n            _this22.clearElement(el, k);\n          }\n        });\n      });\n    }\n    /**\n     * clear the styles for a given element\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearElement\",\n    value: function clearElement(element, key) {\n      /** @type {?} */\n      var builders = this.clearMap.get(element);\n\n      if (builders) {\n        /** @type {?} */\n        var clearFn =\n        /** @type {?} */\n        builders.get(key);\n\n        if (!!clearFn) {\n          clearFn();\n          this.subject.next({\n            element: element,\n            key: key,\n            value: ''\n          });\n        }\n      }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param {?} element\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateElement\",\n    value: function updateElement(element, key, value) {\n      /** @type {?} */\n      var builders = this.updateMap.get(element);\n\n      if (builders) {\n        /** @type {?} */\n        var updateFn =\n        /** @type {?} */\n        builders.get(key);\n\n        if (!!updateFn) {\n          updateFn(value);\n          this.subject.next({\n            element: element,\n            key: key,\n            value: value\n          });\n        }\n      }\n    }\n    /**\n     * release all references to a given element\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"releaseElement\",\n    value: function releaseElement(element) {\n      /** @type {?} */\n      var watcherMap = this.watcherMap.get(element);\n\n      if (watcherMap) {\n        watcherMap.forEach(\n        /**\n        * @param {?} s\n        * @return {?}\n        */\n        function (s) {\n          return s.unsubscribe();\n        });\n        this.watcherMap.delete(element);\n      }\n      /** @type {?} */\n\n\n      var elementMap = this.elementMap.get(element);\n\n      if (elementMap) {\n        elementMap.forEach(\n        /**\n        * @param {?} _\n        * @param {?} s\n        * @return {?}\n        */\n        function (_, s) {\n          return elementMap.delete(s);\n        });\n        this.elementMap.delete(element);\n      }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param {?} element\n     * @param {?=} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggerUpdate\",\n    value: function triggerUpdate(element, key) {\n      var _this23 = this;\n\n      /** @type {?} */\n      var bpMap = this.elementMap.get(element);\n\n      if (bpMap) {\n        /** @type {?} */\n        var valueMap = this.getActivatedValues(bpMap, key);\n\n        if (valueMap) {\n          if (key) {\n            this.updateElement(element, key, valueMap.get(key));\n          } else {\n            valueMap.forEach(\n            /**\n            * @param {?} v\n            * @param {?} k\n            * @return {?}\n            */\n            function (v, k) {\n              return _this23.updateElement(element, k, v);\n            });\n          }\n        }\n      }\n    }\n    /**\n     * Cross-reference for HTMLElement with directive key\n     * @private\n     * @param {?} element\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"buildElementKeyMap\",\n    value: function buildElementKeyMap(element, key) {\n      /** @type {?} */\n      var keyMap = this.elementKeyMap.get(element);\n\n      if (!keyMap) {\n        keyMap = new Set();\n        this.elementKeyMap.set(element, keyMap);\n      }\n\n      keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     * @private\n     * @param {?} element\n     * @param {?} key\n     * @param {?} triggers\n     * @return {?}\n     */\n\n  }, {\n    key: \"watchExtraTriggers\",\n    value: function watchExtraTriggers(element, key, triggers) {\n      var _this24 = this;\n\n      if (triggers && triggers.length) {\n        /** @type {?} */\n        var watchers = this.watcherMap.get(element);\n\n        if (!watchers) {\n          watchers = new Map();\n          this.watcherMap.set(element, watchers);\n        }\n        /** @type {?} */\n\n\n        var subscription = watchers.get(key);\n\n        if (!subscription) {\n          /** @type {?} */\n          var newSubscription = merge.apply(void 0, _toConsumableArray(triggers)).subscribe(\n          /**\n          * @return {?}\n          */\n          function () {\n            /** @type {?} */\n            var currentValue = _this24.getValue(element, key);\n\n            _this24.updateElement(element, key, currentValue);\n          });\n          watchers.set(key, newSubscription);\n        }\n      }\n    }\n    /**\n     * Breakpoint locator by mediaQuery\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"findByQuery\",\n    value: function findByQuery(query) {\n      return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @private\n     * @param {?} bpMap\n     * @param {?=} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getActivatedValues\",\n    value: function getActivatedValues(bpMap, key) {\n      for (var i = 0; i < this.activatedBreakpoints.length; i++) {\n        /** @type {?} */\n        var activatedBp = this.activatedBreakpoints[i];\n        /** @type {?} */\n\n        var valueMap = bpMap.get(activatedBp.alias);\n\n        if (valueMap) {\n          if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n            return valueMap;\n          }\n        }\n      }\n      /** @type {?} */\n\n\n      var lastHope = bpMap.get('');\n      return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"observeActivations\",\n    value: function observeActivations() {\n      /** @type {?} */\n      var target =\n      /** @type {?} */\n\n      /** @type {?} */\n      this;\n      /** @type {?} */\n\n      var queries = this.breakpoints.items.map(\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      function (bp) {\n        return bp.mediaQuery;\n      });\n      this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n    }\n  }]);\n\n  return MediaMarshaller;\n}();\n\nMediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) {\n  return new (t || MediaMarshaller)(ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(PrintHook));\n};\n/** @nocollapse */\n\n\nMediaMarshaller.ɵprov = ɵɵdefineInjectable({\n  factory: function MediaMarshaller_Factory() {\n    return new MediaMarshaller(ɵɵinject(MatchMedia), ɵɵinject(BreakPointRegistry), ɵɵinject(PrintHook));\n  },\n  token: MediaMarshaller,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nMediaMarshaller.ctorParameters = function () {\n  return [{\n    type: MatchMedia\n  }, {\n    type: BreakPointRegistry\n  }, {\n    type: PrintHook\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMarshaller, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MatchMedia\n    }, {\n      type: BreakPointRegistry\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * @param {?} map\n * @param {?} element\n * @param {?} key\n * @param {?=} input\n * @return {?}\n */\n\n\nfunction initBuilderMap(map$$1, element, key, input) {\n  if (input !== undefined) {\n    /** @type {?} */\n    var oldMap = map$$1.get(element);\n\n    if (!oldMap) {\n      oldMap = new Map();\n      map$$1.set(element, oldMap);\n    }\n\n    oldMap.set(key, input);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook };","map":{"version":3,"sources":["../../../src/lib/core/browser-provider.ts","../../../src/lib/core/module.ts","../../../src/lib/core/media-change.ts","../../../src/lib/core/stylesheet-map/stylesheet-map.ts","../../../src/lib/core/tokens/library-config.ts","../../../src/lib/core/tokens/server-token.ts","../../../src/lib/core/tokens/breakpoint-token.ts","../../../src/lib/core/add-alias.ts","../../../src/lib/utils/layout-validator.ts","../../../src/lib/core/base/base2.ts","../../../src/lib/core/breakpoints/data/break-points.ts","../../../src/lib/core/breakpoints/data/orientation-break-points.ts","../../../src/lib/utils/object-extend.ts","../../../src/lib/core/breakpoints/breakpoint-tools.ts","../../../src/lib/core/breakpoints/break-points-token.ts","../../../src/lib/core/utils/sort.ts","../../../src/lib/core/breakpoints/break-point-registry.ts","../../../src/lib/core/match-media/match-media.ts","../../../src/lib/core/match-media/mock/mock-match-media.ts","../../../src/lib/core/media-marshaller/print-hook.ts","../../../src/lib/core/utils/array.ts","../../../src/lib/core/media-observer/media-observer.ts","../../../src/lib/core/media-trigger/media-trigger.ts","../../../src/lib/utils/auto-prefixer.ts","../../../src/lib/core/style-utils/style-utils.ts","../../../src/lib/core/style-builder/style-builder.ts","../../../src/lib/core/basis-validator/basis-validator.ts","../../../src/lib/core/media-marshaller/media-marshaller.ts"],"names":["map"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nexport function removeStyles(_document: Document, platformId: Object) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n          el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n\n/**\n *  Provider to remove SSR styles on the browser\n */\nexport const BROWSER_PROVIDER = {\n  provide: <InjectionToken<(() => void)[]>>APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n\nexport const CLASS_NAME = 'flex-layout-';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {BROWSER_PROVIDER} from './browser-provider';\n\n\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\n@NgModule({\n  providers: [BROWSER_PROVIDER]\n})\nexport class CoreModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string = '';\n  value: any;\n\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(public matches = false,\n              public mediaQuery = 'all',\n              public mqAlias = '',\n              public suffix = '',\n              public priority = 0) {\n  }\n\n  /** Create an exact copy of the MediaChange */\n  clone(): MediaChange {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n@Injectable({providedIn: 'root'})\nexport class StylesheetMap {\n\n  readonly stylesheet = new Map<HTMLElement, Map<string, string|number>>();\n\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element: HTMLElement, style: string, value: string|number) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el: HTMLElement, styleName: string): string {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** a set of configuration options for FlexLayoutModule */\nexport interface LayoutConfigOptions {\n  addFlexToParent?: boolean;\n  addOrientationBps?: boolean;\n  disableDefaultBps?: boolean;\n  disableVendorPrefixes?: boolean;\n  serverLoaded?: boolean;\n  useColumnBasisZero?: boolean;\n  printWithBreakpoints?: string[];\n  mediaTriggerAutoRestore?: boolean;\n  ssrObserveBreakpoints?: string[];\n}\n\nexport const DEFAULT_CONFIG: LayoutConfigOptions = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: [],\n};\n\nexport const LAYOUT_CONFIG = new InjectionToken<LayoutConfigOptions>(\n    'Flex Layout token, config options for the library', {\n      providedIn: 'root',\n      factory: () => DEFAULT_CONFIG\n    });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nexport const SERVER_TOKEN = new InjectionToken<boolean>(\n  'FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from '../breakpoints/break-point';\n\nexport const BREAKPOINT = new InjectionToken<BreakPoint|BreakPoint[]|null>(\n  'Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from './media-change';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint | null): MediaChange {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix as string;\n    dest.priority = source.priority as number;\n  }\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const INLINE = 'inline';\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string): [string, string, boolean] {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = (inline !== INLINE) ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, ] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value: string) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction: string, wrap: string | null = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {StyleDefinition, StyleUtils} from '../style-utils/style-utils';\nimport {StyleBuilder} from '../style-builder/style-builder';\nimport {MediaMarshaller} from '../media-marshaller/media-marshaller';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n\nexport abstract class BaseDirective2 implements OnChanges, OnDestroy {\n\n  protected DIRECTIVE_KEY = '';\n  protected inputs: string[] = [];\n  /** The most recently used styles for the builder */\n  protected mru: StyleDefinition = {};\n  protected destroySubject: Subject<void> = new Subject();\n  protected currentValue: any;\n\n  /** Access to host element's parent DOM node */\n  protected get parentElement(): HTMLElement | null {\n    return this.elementRef.nativeElement.parentElement;\n  }\n\n  /** Access to the HTMLElement for the directive */\n  protected get nativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /** Access to the activated value for the directive */\n  get activatedValue(): string {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value: string) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value,\n      this.marshal.activatedAlias);\n  }\n\n  /** Cache map for style computation */\n  protected styleCache: Map<string, StyleDefinition> = new Map();\n\n  protected constructor(protected elementRef: ElementRef,\n                        protected styleBuilder: StyleBuilder,\n                        protected styler: StyleUtils,\n                        protected marshal: MediaMarshaller) {\n  }\n\n  /** For @Input changes */\n  ngOnChanges(changes: SimpleChanges) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n\n  /** Register with central marshaller service */\n  protected init(extraTriggers: Observable<any>[] = []): void {\n    this.marshal.init(\n      this.elementRef.nativeElement,\n      this.DIRECTIVE_KEY,\n      this.updateWithValue.bind(this),\n      this.clearStyles.bind(this),\n      extraTriggers\n    );\n  }\n\n  /** Add styles to the element using predefined style builder */\n  protected addStyles(input: string, parent?: Object) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n\n    let genStyles: StyleDefinition | undefined = this.styleCache.get(input);\n\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n\n    this.mru = {...genStyles};\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n\n  /** Remove generated styles from an element using predefined style builder */\n  protected clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n\n  /** Force trigger style updates on DOM element */\n  protected triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected getFlexFlowDirection(target: HTMLElement, addIfMissing = false): string {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n\n      return value.trim();\n    }\n\n    return 'row';\n  }\n\n  protected hasWrap(target: HTMLElement): boolean {\n    return this.styler.hasWrap(target);\n  }\n\n  /** Applies styles given via string pair or object map to the directive element */\n  protected applyStyleToElement(style: StyleDefinition,\n                                value?: string | number,\n                                element: HTMLElement = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n\n  protected setValue(val: any, bp: string): void {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n\n  protected updateWithValue(input: string) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n    priority: 1000,\n  },\n  {\n    alias: 'sm',\n    mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n    priority: 900,\n  },\n  {\n    alias: 'md',\n    mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n    priority: 800,\n  },\n  {\n    alias: 'lg',\n    mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n    priority: 700,\n  },\n  {\n    alias: 'xl',\n    mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n    priority: 600,\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 599.98px)',\n    priority: 950,\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 959.98px)',\n    priority: 850,\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 1279.98px)',\n    priority: 750,\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    priority: 650,\n    mediaQuery: 'screen and (max-width: 1919.98px)',\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 600px)',\n    priority: -950,\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 960px)',\n    priority: -850,\n  }, {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1280px)',\n    priority: -750,\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1920px)',\n    priority: -650,\n  }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\n\nconst TABLET_PORTRAIT   = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE  = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\n\nconst WEB_PORTRAIT      = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientation: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            priority: 2000, 'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             priority: 2100, 'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE},\n  {'alias': 'tablet.portrait',    priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from './break-point';\nimport {extendObject} from '../../utils/object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias);   // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const dict: {[key: string]: BreakPoint} = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINT} from '../tokens/breakpoint-token';\nimport {DEFAULT_BREAKPOINTS} from '../breakpoints/data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from '../breakpoints/data/orientation-break-points';\nimport {mergeByAlias} from '../breakpoints/breakpoint-tools';\nimport {LAYOUT_CONFIG} from '../tokens/library-config';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n  new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n      const breakpoints: any = inject(BREAKPOINT);\n      const layoutConfig = inject(LAYOUT_CONFIG);\n      const bpFlattenArray: BreakPoint[] = [].concat.apply([], (breakpoints || [])\n        .map((v: BreakPoint | BreakPoint[]) => Array.isArray(v) ? v : [v]));\n      const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n        .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n\n      return mergeByAlias(builtIns, bpFlattenArray);\n    }\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface WithPriority {\n  priority?: number;\n}\n\n/** HOF to sort the breakpoints by descending priority */\nexport function sortDescendingPriority<T extends WithPriority>(a: T | null, b: T | null): number {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n\n/** HOF to sort the breakpoints by ascending priority */\nexport function sortAscendingPriority<T extends WithPriority>(a: T, b: T): number {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {sortAscendingPriority} from '../utils/sort';\n\nexport type OptionalBreakPoint = BreakPoint | null;\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n@Injectable({providedIn: 'root'})\nexport class BreakPointRegistry {\n  readonly items: BreakPoint[];\n\n  constructor(@Inject(BREAKPOINTS) list: BreakPoint[]) {\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): OptionalBreakPoint {\n    return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias == alias);\n  }\n\n  findByQuery(query: string): OptionalBreakPoint {\n    return this.findWithPredicate(query, (bp) => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this.items.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this.items.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this.items.map(it => !!it.suffix ? it.suffix : '');\n  }\n\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  private findWithPredicate(key: string,\n      searchFn: (bp: BreakPoint) => boolean): OptionalBreakPoint {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n\n  }\n\n  /**\n   * Memoized BreakPoint Lookups\n   */\n  private readonly findByMap = new Map<String, OptionalBreakPoint>();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, OnDestroy, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\nimport {BehaviorSubject, Observable, merge, Observer} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\nimport {MediaChange} from '../media-change';\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable({providedIn: 'root'})\nexport class MatchMedia implements OnDestroy {\n  /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n  readonly source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n  registry = new Map<string, MediaQueryList>();\n  private readonly pendingRemoveListenerFns: Array<() => void> = [];\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Publish list of all current activations\n   */\n  get activations(): string[] {\n    const results: string[] = [];\n    this.registry.forEach((mql: MediaQueryList, key: string) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    const mql = this.registry.get(mediaQuery);\n    return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(m => m.matches);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   *\n   * If a mediaQuery is not specified, then ALL mediaQuery activations will\n   * be announced.\n   */\n  observe(): Observable<MediaChange>;\n  observe(mediaQueries: string[]): Observable<MediaChange>;\n  observe(mediaQueries: string[], filterOthers: boolean): Observable<MediaChange>;\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList?: string[], filterOthers = false): Observable<MediaChange> {\n    if (mqList && mqList.length) {\n      const matchMedia$: Observable<MediaChange> = this._observable$.pipe(\n          filter((change: MediaChange) =>\n            !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1))\n      );\n      const registration$: Observable<MediaChange> = new Observable((observer: Observer<MediaChange>) => {  // tslint:disable-line:max-line-length\n        const matches: Array<MediaChange> = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop()!;\n          matches.forEach((e: MediaChange) => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n\n    return this._observable$;\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches: MediaChange[] = [];\n\n    buildQueryCss(list, this._document);\n\n    list.forEach((query: string) => {\n      const onMQLEvent = (e: MediaQueryListEvent) => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(() => mql!.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n\n    return matches;\n  }\n\n  ngOnDestroy(): void {\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n\n  protected _observable$ = this.source.asObservable();\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES: { [key: string]: any } = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries: string[], _document: Document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n\n    try {\n      const styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n      if (!(styleEl as any).styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      _document.head!.appendChild(styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction constructMql(query: string, isBrowser: boolean): MediaQueryList {\n  const canListen = isBrowser && !!(<Window>window).matchMedia('all').addListener;\n\n  return canListen ? (<Window>window).matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {\n    },\n    removeListener: () => {\n    },\n    onchange: null,\n    addEventListener() {\n    },\n    removeEventListener() {\n    },\n    dispatchEvent() {\n      return false;\n    }\n  } as MediaQueryList;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n\n  autoRegisterQueries = true;   // Used for testing BreakPoint registrations\n  useOverlaps = false;          // Allow fallback to overlapping mediaQueries\n\n  constructor(_zone: NgZone,\n              @Inject(PLATFORM_ID) _platformId: Object,\n              @Inject(DOCUMENT) _document: any,\n              private _breakpoints: BreakPointRegistry) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this.registry.forEach((mql: MediaQueryList) => {\n      (mql as MockMediaQueryList).destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias: string) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return (bp && bp.mediaQuery) || queryOrAlias;\n  }\n\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp ? bp.alias : 'unknown';\n\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg'   :\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md'   :\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm'   :\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs'   :\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl'   :\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg'   :\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md'   :\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm'   :\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(aliases: string[]) {\n    const activate = (alias: string) => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.forEach(activate);\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery: string) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    const mql: MockMediaQueryList = this.registry.get(mediaQuery) as MockMediaQueryList;\n\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /** Deactivate all current MQLs and reset the buffer */\n  private _deactivateAll() {\n    this.registry.forEach((it: MediaQueryList) => {\n      (it as MockMediaQueryList).deactivate();\n    });\n    return this;\n  }\n\n  /** Insure the mediaQuery is registered with MatchMedia */\n  private _registerMediaQuery(mediaQuery: string) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return this.activations.length > 0;\n  }\n\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {\n  }\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): MockMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n    }\n  }\n\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | AddEventListenerOptions): void;\n\n  addEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | EventListenerOptions): void;\n\n  removeEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport const MockMatchMediaProvider = {  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Interface to apply PrintHook to call anonymous `target.updateStyles()`\n */\nexport interface HookTarget {\n  activatedBreakpoints: BreakPoint[];\n  updateStyles(): void;\n}\n\nconst PRINT = 'print';\nexport const BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n@Injectable({providedIn: 'root'})\nexport class PrintHook implements OnDestroy {\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries: string[]): string[] {\n    return [...queries, PRINT];\n  }\n\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e: MediaChange): Boolean {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias(): string[] {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints(): BreakPoint[] {\n    return this.printAlias\n        .map(alias => this.breakpoints.findByAlias(alias))\n        .filter(bp => bp !== null) as BreakPoint[];\n  }\n\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({mediaQuery}: MediaChange): BreakPoint[] {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n\n    return list.sort(sortDescendingPriority);\n  }\n\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event: MediaChange): MediaChange {\n    let bp: OptionalBreakPoint = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n\n\n  // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n  //  and `afterprint` event listeners.\n  private registeredBeforeAfterPrintHooks: boolean = false;\n\n  // isPrintingBeforeAfterEvent is used to track if we are printing from within\n  // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n  // form `interceptEvents` so that printing is not stopped while the dialog\n  // is still open. This is an extension of the `isPrinting` property on\n  // browsers which support `beforeprint` and `afterprint` events.\n  private isPrintingBeforeAfterEvent: boolean = false;\n\n  private beforePrintEventListeners: Function[] = [];\n  private afterPrintEventListeners: Function[] = [];\n\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  private registerBeforeAfterPrintHooks(target: HookTarget) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n\n    this.registeredBeforeAfterPrintHooks = true;\n\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n\n  /**\n   * Prepare RxJS filter operator with partial application\n   * @return pipeable filter predicate\n   */\n  interceptEvents(target: HookTarget) {\n    this.registerBeforeAfterPrintHooks(target);\n\n    return (event: MediaChange) => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n      } else {\n        this.collectActivations(event);\n      }\n    };\n  }\n\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return (event: MediaChange): boolean => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n\n  /** For any print de-activations, reset the entire print queue */\n  protected stopPrinting(target: HookTarget) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(event: MediaChange) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {   // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n      }\n    }\n  }\n\n  /** Teardown logic for the service. */\n  ngOnDestroy() {\n    this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n    this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n  }\n\n  /** Is this service currently in Print-mode ? */\n  private isPrinting = false;\n  private queue: PrintQueue = new PrintQueue();\n  private deactivations: BreakPoint[] = [];\n\n}\n\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  /** Sorted queue with prioritized print breakpoints */\n  printBreakpoints: BreakPoint[] = [];\n\n  addPrintBreakpoints(bpList: OptionalBreakPoint[]): BreakPoint[] {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n\n    return this.printBreakpoints;\n  }\n\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp: OptionalBreakPoint) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n            : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp: OptionalBreakPoint) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {Subject, asapScheduler, Observable, of} from 'rxjs';\nimport {debounceTime, filter, map, switchMap, takeUntil} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {PrintHook} from '../media-marshaller/print-hook';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\n\nimport {sortDescendingPriority} from '../utils/sort';\nimport {coerceArray} from '../utils/array';\n\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n@Injectable({providedIn: 'root'})\nexport class MediaObserver implements OnDestroy {\n\n  /**\n   * @deprecated Use `asObservable()` instead.\n   * @breaking-change 8.0.0-beta.25\n   * @deletion-target 10.0.0\n   */\n  readonly media$: Observable<MediaChange>;\n\n  /** Filter MediaChange notifications for overlapping breakpoints */\n  filterOverlaps = false;\n\n  constructor(protected breakpoints: BreakPointRegistry,\n              protected matchMedia: MatchMedia,\n              protected hook: PrintHook) {\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(\n      filter((changes: MediaChange[]) => changes.length > 0),\n      map((changes: MediaChange[]) => changes[0])\n    );\n  }\n\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  // ************************************************\n  // Public Methods\n  // ************************************************\n\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable(): Observable<MediaChange[]> {\n    return this._media$;\n  }\n\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n  isActive(value: string | string[]): boolean {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private buildObservable(mqList: string[]): Observable<MediaChange[]> {\n    const hasChanges = (changes: MediaChange[]) => {\n      const isValidQuery = (change: MediaChange) => (change.mediaQuery.length > 0);\n      return (changes.filter(isValidQuery).length > 0);\n    };\n    const excludeOverlaps = (changes: MediaChange[]) => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n\n    /**\n     */\n    return this.matchMedia\n        .observe(this.hook.withPrintQuery(mqList))\n        .pipe(\n            filter((change: MediaChange) => change.matches),\n            debounceTime(0, asapScheduler),\n            switchMap(_ => of(this.findAllActivations())),\n            map(excludeOverlaps),\n            filter(hasChanges),\n            takeUntil(this.destroyed$)\n        );\n  }\n\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  private findAllActivations(): MediaChange[] {\n    const mergeMQAlias = (change: MediaChange) => {\n      let bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = (change: MediaChange) => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n\n    return this.matchMedia\n        .activations\n        .map(query => new MediaChange(true, query))\n        .map(replaceWithPrintAlias)\n        .map(mergeMQAlias)\n        .sort(sortDescendingPriority);\n  }\n\n  private readonly _media$: Observable<MediaChange[]>;\n  private readonly destroyed$ = new Subject<void>();\n}\n\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query: string, locator: BreakPointRegistry) {\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\nimport {fromEvent, Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n/**\n * Class\n */\n@Injectable({providedIn: 'root'})\nexport class MediaTrigger {\n\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      protected matchMedia: MatchMedia,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions,\n      @Inject(PLATFORM_ID) protected _platformId: Object,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list: string[]) {\n    list = list.map(it => it.trim()); // trim queries\n\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n\n    this.prepareAutoRestore();\n  }\n\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = (change: MediaChange) => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  private prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  private deactivateAll() {\n    const list = this.currentActivations;\n\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  private saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = (query: string) => new MediaChange(true, query);\n      const mergeMQAlias = (change: MediaChange) => {\n        const bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n\n      this.originalActivations = this.currentActivations\n          .map(toMediaChange)\n          .map(mergeMQAlias)\n          .sort(sortDescendingPriority);\n\n      this.cacheRegistryMatches();\n    }\n  }\n\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  private setActivations(list: string[]) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  private simulateMediaChanges(queries: string[], matches = true) {\n    const toMediaQuery = (query: string) => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = (query: string) => this.emitChangeEvent(matches, query);\n\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  private forceRegistryMatches(queries: string[], matches: boolean) {\n    const registry = new Map<string, MediaQueryList>();\n    queries.forEach(query => {\n      registry.set(query, {matches} as MediaQueryList);\n    });\n\n    this.matchMedia.registry = registry;\n  }\n\n  /**\n   * Save current MatchMedia::registry items.\n   */\n  private cacheRegistryMatches() {\n    const target = this.originalRegistry;\n\n    target.clear();\n    this.matchMedia.registry.forEach((value: MediaQueryList, key: string) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n\n  /**\n   * Restore original, 'true' registry\n   */\n  private restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n\n    target.clear();\n    this.originalRegistry.forEach((value: MediaQueryList, key: string) => {\n      target.set(key, value);\n    });\n\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  private emitChangeEvent(matches: boolean, query: string) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n\n  private get currentActivations(): string[] {\n    return this.matchMedia.activations;\n  }\n\n  private hasCachedRegistryMatches = false;\n  private originalActivations: MediaChange[] = [];\n  private originalRegistry: Map<string, MediaQueryList> = new Map<string, MediaQueryList>();\n\n  private resizeSubscription!: Subscription;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target: {[key: string]: any | null}) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {StylesheetMap} from '../stylesheet-map/stylesheet-map';\nimport {SERVER_TOKEN} from '../tokens/server-token';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n@Injectable({providedIn: 'root'})\nexport class StyleUtils {\n\n  constructor(private _serverStylesheet: StylesheetMap,\n              @Inject(SERVER_TOKEN) private _serverModuleLoaded: boolean,\n              @Inject(PLATFORM_ID) private _platformId: Object,\n              @Inject(LAYOUT_CONFIG) private layoutConfig: LayoutConfigOptions) {}\n\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element: HTMLElement,\n                      style: StyleDefinition | string,\n                      value: string | number | null = null) {\n    let styles: StyleDefinition = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style: StyleDefinition, elements: HTMLElement[] = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target: HTMLElement): [string, string] {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) ||\n    (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n\n    return [value || 'row', hasInlineValue];\n  }\n\n  hasWrap(target: HTMLElement): boolean {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element: HTMLElement, attribute: string): string {\n    return element.getAttribute(attribute) || '';\n  }\n\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element: HTMLElement, styleName: string): string {\n    return isPlatformBrowser(this._platformId) ?\n      element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  private _applyMultiValueStyleToElement(styles: StyleDefinition,\n                                         element: HTMLElement) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values: (string | number | null)[] = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ?\n            element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n\n  private _setServerStyle(element: any, styleName: string, styleValue?: string|null) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n\n  private _getServerStyle(element: any, styleName: string): string {\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n\n  private _readStyleAttribute(element: any): {[name: string]: string} {\n    const styleMap: {[name: string]: string} = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n\n  private _writeStyleAttribute(element: any, styleMap: {[name: string]: string}) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport type StyleDefinition = { [property: string]: string | number | null };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {StyleDefinition} from '../style-utils/style-utils';\n\n/** A class that encapsulates CSS style generation for common directives */\nexport abstract class StyleBuilder {\n\n  /** Whether to cache the generated output styles */\n  shouldCache = true;\n\n  /** Build the styles given an input string and configuration object from a host */\n  abstract buildStyles(input: string, parent?: Object): StyleDefinition;\n\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input: string, _styles: StyleDefinition, _parent?: Object) {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {filter, tap} from 'rxjs/operators';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {MediaChange} from '../media-change';\n\nimport {PrintHook, HookTarget} from './print-hook';\nimport {mergeAlias} from '../add-alias';\n\ntype ClearCallback = () => void;\ntype UpdateCallback = (val: any) => void;\ntype Builder = UpdateCallback | ClearCallback;\n\ntype ValueMap = Map<string, string>;\ntype BreakpointMap = Map<string, ValueMap>;\ntype ElementMap = Map<HTMLElement, BreakpointMap>;\ntype ElementKeyMap = WeakMap<HTMLElement, Set<string>>;\ntype SubscriptionMap = Map<string, Subscription>;\ntype WatcherMap = WeakMap<HTMLElement, SubscriptionMap>;\ntype BuilderMap = WeakMap<HTMLElement, Map<string, Builder>>;\n\nexport interface ElementMatcher {\n  element: HTMLElement;\n  key: string;\n  value: any;\n}\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n@Injectable({providedIn: 'root'})\nexport class MediaMarshaller {\n  private activatedBreakpoints: BreakPoint[] = [];\n  private elementMap: ElementMap = new Map();\n  private elementKeyMap: ElementKeyMap = new WeakMap();\n  private watcherMap: WatcherMap = new WeakMap();     // special triggers to update elements\n  private updateMap: BuilderMap = new WeakMap();      // callback functions to update styles\n  private clearMap: BuilderMap = new WeakMap();       // callback functions to clear styles\n\n  private subject: Subject<ElementMatcher> = new Subject();\n\n  get activatedAlias(): string {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n\n  constructor(protected matchMedia: MatchMedia,\n              protected breakpoints: BreakPointRegistry,\n              protected hook: PrintHook) {\n    this.observeActivations();\n  }\n\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc: MediaChange) {\n    const bp: BreakPoint | null = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n      }\n    }\n  }\n\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element: HTMLElement,\n       key: string,\n       updateFn?: UpdateCallback,\n       clearFn?: ClearCallback,\n       extraTriggers: Observable<any>[] = []): void {\n\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element: HTMLElement, key: string, bp?: string): any {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element: HTMLElement, key: string): boolean {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element: HTMLElement, key: string, val: any, bp: string): void {\n    let bpMap: BreakpointMap | undefined = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n\n  /** Track element value changes for a specific key */\n  trackValue(element: HTMLElement, key: string): Observable<ElementMatcher> {\n    return this.subject\n        .asObservable()\n        .pipe(filter(v => v.element === element && v.key === key));\n  }\n\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles(): void {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el)!);\n      let valueMap = this.getActivatedValues(bpMap);\n\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n\n    });\n  }\n\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element: HTMLElement, key: string): void {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn: ClearCallback = builders.get(key) as ClearCallback;\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({element, key, value: ''});\n      }\n    }\n  }\n\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element: HTMLElement, key: string, value: any): void {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn: UpdateCallback = builders.get(key) as UpdateCallback;\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({element, key, value});\n      }\n    }\n  }\n\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element: HTMLElement): void {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element: HTMLElement, key?: string): void {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n\n  /** Cross-reference for HTMLElement with directive key */\n  private buildElementKeyMap(element: HTMLElement, key: string) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  private watchExtraTriggers(element: HTMLElement,\n                             key: string,\n                             triggers: Observable<any>[]) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n\n  /** Breakpoint locator by mediaQuery */\n  private findByQuery(query: string) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  private getActivatedValues(bpMap: BreakpointMap, key?: string): ValueMap | undefined {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n          return valueMap;\n        }\n      }\n    }\n    const lastHope = bpMap.get('');\n    return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n  }\n\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  private observeActivations() {\n    const target = this as unknown as HookTarget;\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n\n    this.matchMedia\n        .observe(this.hook.withPrintQuery(queries))\n        .pipe(\n            tap(this.hook.interceptEvents(target)),\n            filter(this.hook.blockPropagation())\n        )\n        .subscribe(this.onMediaChange.bind(this));\n  }\n\n}\n\nfunction initBuilderMap(map: BuilderMap,\n                        element: HTMLElement,\n                        key: string,\n                        input?: UpdateCallback | ClearCallback): void {\n  if (input !== undefined) {\n    let oldMap = map.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}