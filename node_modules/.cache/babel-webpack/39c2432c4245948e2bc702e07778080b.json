{"ast":null,"code":"import _slicedToArray from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:/PROJECTS/WEBSITE/newtest/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: /*@__PURE__*/trigger('state', [/*@__PURE__*/state('initial, void, hidden', /*@__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), /*@__PURE__*/state('visible', /*@__PURE__*/style({\n    transform: 'scale(1)'\n  })), /*@__PURE__*/transition('* => visible', /*@__PURE__*/animate('200ms cubic-bezier(0, 0, 0.2, 1)', /*@__PURE__*/keyframes([/*@__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), /*@__PURE__*/style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), /*@__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), /*@__PURE__*/transition('* => hidden', /*@__PURE__*/animate('100ms cubic-bezier(0, 0, 0.2, 1)', /*@__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nvar SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nvar passiveListenerOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nvar LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = /*@__PURE__*/new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/** @docs-private */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n\nvar MatTooltip = /*@__PURE__*/function () {\n  var MatTooltip = /*#__PURE__*/function () {\n    function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions,\n    /** @breaking-change 11.0.0 _document argument to become required. */\n    _document) {\n      var _this = this;\n\n      _classCallCheck(this, MatTooltip);\n\n      this._overlay = _overlay;\n      this._elementRef = _elementRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewContainerRef = _viewContainerRef;\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._ariaDescriber = _ariaDescriber;\n      this._focusMonitor = _focusMonitor;\n      this._dir = _dir;\n      this._defaultOptions = _defaultOptions;\n      this._position = 'below';\n      this._disabled = false;\n      this._viewInitialized = false;\n      this._pointerExitEventsInitialized = false;\n      /** The default delay in ms before showing the tooltip after show is called */\n\n      this.showDelay = this._defaultOptions.showDelay;\n      /** The default delay in ms before hiding the tooltip after hide is called */\n\n      this.hideDelay = this._defaultOptions.hideDelay;\n      /**\n       * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n       * uses a long press gesture to show and hide, however it can conflict with the native browser\n       * gestures. To work around the conflict, Angular Material disables native gestures on the\n       * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n       * elements). The different values for this option configure the touch event handling as follows:\n       * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n       *   browser gestures on particular elements. In particular, it allows text selection on inputs\n       *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n       * - `on` - Enables touch gestures for all elements and disables native\n       *   browser gestures with no exceptions.\n       * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n       *   showing on touch devices.\n       */\n\n      this.touchGestures = 'auto';\n      this._message = '';\n      /** Manually-bound passive event listeners. */\n\n      this._passiveListeners = [];\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Handles the keydown events on the host element.\n       * Needs to be an arrow function so that we can use it in addEventListener.\n       */\n\n      this._handleKeydown = function (event) {\n        if (_this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          _this._ngZone.run(function () {\n            return _this.hide(0);\n          });\n        }\n      };\n\n      this._scrollStrategy = scrollStrategy;\n\n      if (_defaultOptions) {\n        if (_defaultOptions.position) {\n          this.position = _defaultOptions.position;\n        }\n\n        if (_defaultOptions.touchGestures) {\n          this.touchGestures = _defaultOptions.touchGestures;\n        }\n      }\n\n      _ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keydown', _this._handleKeydown);\n      });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n    _createClass(MatTooltip, [{\n      key: \"position\",\n      get: function get() {\n        return this._position;\n      },\n      set: function set(value) {\n        if (value !== this._position) {\n          this._position = value;\n\n          if (this._overlayRef) {\n            this._updatePosition();\n\n            if (this._tooltipInstance) {\n              this._tooltipInstance.show(0);\n            }\n\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n      /** Disables the display of the tooltip. */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n        if (this._disabled) {\n          this.hide(0);\n        } else {\n          this._setupPointerEnterEventsIfNeeded();\n        }\n      }\n      /** The message to be displayed in the tooltip */\n\n    }, {\n      key: \"message\",\n      get: function get() {\n        return this._message;\n      },\n      set: function set(value) {\n        var _this2 = this;\n\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n        this._message = value != null ? String(value).trim() : '';\n\n        if (!this._message && this._isTooltipVisible()) {\n          this.hide(0);\n        } else {\n          this._setupPointerEnterEventsIfNeeded();\n\n          this._updateTooltipMessage();\n\n          this._ngZone.runOutsideAngular(function () {\n            // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n            // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n            // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n            // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n            Promise.resolve().then(function () {\n              _this2._ariaDescriber.describe(_this2._elementRef.nativeElement, _this2.message, 'tooltip');\n            });\n          });\n        }\n      }\n      /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n    }, {\n      key: \"tooltipClass\",\n      get: function get() {\n        return this._tooltipClass;\n      },\n      set: function set(value) {\n        this._tooltipClass = value;\n\n        if (this._tooltipInstance) {\n          this._setTooltipClass(this._tooltipClass);\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this3 = this;\n\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n\n        this._setupPointerEnterEventsIfNeeded();\n\n        this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n          // Note that the focus monitor runs outside the Angular zone.\n          if (!origin) {\n            _this3._ngZone.run(function () {\n              return _this3.hide(0);\n            });\n          } else if (origin === 'keyboard') {\n            _this3._ngZone.run(function () {\n              return _this3.show();\n            });\n          }\n        });\n      }\n      /**\n       * Dispose the tooltip when destroyed.\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n\n        if (this._overlayRef) {\n          this._overlayRef.dispose();\n\n          this._tooltipInstance = null;\n        } // Clean up the event listeners set in the constructor\n\n\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n        this._passiveListeners.forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              event = _ref2[0],\n              listener = _ref2[1];\n\n          nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n\n        this._passiveListeners.length = 0;\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n        this._focusMonitor.stopMonitoring(nativeElement);\n      }\n      /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this4 = this;\n\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n        if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n          return;\n        }\n\n        var overlayRef = this._createOverlay();\n\n        this._detach();\n\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n        this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this4._detach();\n        });\n\n        this._setTooltipClass(this._tooltipClass);\n\n        this._updateTooltipMessage();\n\n        this._tooltipInstance.show(delay);\n      }\n      /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance.hide(delay);\n        }\n      }\n      /** Shows/hides the tooltip */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n      }\n      /** Returns true if the tooltip is currently visible to the user */\n\n    }, {\n      key: \"_isTooltipVisible\",\n      value: function _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n      }\n      /** Create the overlay config and position strategy */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay() {\n        var _this5 = this;\n\n        if (this._overlayRef) {\n          return this._overlayRef;\n        }\n\n        var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n        var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n          if (_this5._tooltipInstance) {\n            if (change.scrollableViewProperties.isOverlayClipped && _this5._tooltipInstance.isVisible()) {\n              // After position changes occur and the overlay is clipped by\n              // a parent scrollable then close the tooltip.\n              _this5._ngZone.run(function () {\n                return _this5.hide(0);\n              });\n            }\n          }\n        });\n        this._overlayRef = this._overlay.create({\n          direction: this._dir,\n          positionStrategy: strategy,\n          panelClass: TOOLTIP_PANEL_CLASS,\n          scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this5._detach();\n        });\n\n        return this._overlayRef;\n      }\n      /** Detaches the currently-attached tooltip. */\n\n    }, {\n      key: \"_detach\",\n      value: function _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this._tooltipInstance = null;\n      }\n      /** Updates the position of the current tooltip. */\n\n    }, {\n      key: \"_updatePosition\",\n      value: function _updatePosition() {\n        var position = this._overlayRef.getConfig().positionStrategy;\n\n        var origin = this._getOrigin();\n\n        var overlay = this._getOverlayPosition();\n\n        position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n      }\n      /**\n       * Returns the origin position and a fallback position based on the user's position preference.\n       * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n       */\n\n    }, {\n      key: \"_getOrigin\",\n      value: function _getOrigin() {\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        var position = this.position;\n        var originPosition;\n\n        if (position == 'above' || position == 'below') {\n          originPosition = {\n            originX: 'center',\n            originY: position == 'above' ? 'top' : 'bottom'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          originPosition = {\n            originX: 'start',\n            originY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          originPosition = {\n            originX: 'end',\n            originY: 'center'\n          };\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n            x = _this$_invertPosition.x,\n            y = _this$_invertPosition.y;\n\n        return {\n          main: originPosition,\n          fallback: {\n            originX: x,\n            originY: y\n          }\n        };\n      }\n      /** Returns the overlay position and a fallback position based on the user's preference */\n\n    }, {\n      key: \"_getOverlayPosition\",\n      value: function _getOverlayPosition() {\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        var position = this.position;\n        var overlayPosition;\n\n        if (position == 'above') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'bottom'\n          };\n        } else if (position == 'below') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'top'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'end',\n            overlayY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'start',\n            overlayY: 'center'\n          };\n        } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n            x = _this$_invertPosition2.x,\n            y = _this$_invertPosition2.y;\n\n        return {\n          main: overlayPosition,\n          fallback: {\n            overlayX: x,\n            overlayY: y\n          }\n        };\n      }\n      /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n    }, {\n      key: \"_updateTooltipMessage\",\n      value: function _updateTooltipMessage() {\n        var _this6 = this;\n\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n          this._tooltipInstance.message = this.message;\n\n          this._tooltipInstance._markForCheck();\n\n          this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n            if (_this6._tooltipInstance) {\n              _this6._overlayRef.updatePosition();\n            }\n          });\n        }\n      }\n      /** Updates the tooltip class */\n\n    }, {\n      key: \"_setTooltipClass\",\n      value: function _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n          this._tooltipInstance.tooltipClass = tooltipClass;\n\n          this._tooltipInstance._markForCheck();\n        }\n      }\n      /** Inverts an overlay position. */\n\n    }, {\n      key: \"_invertPosition\",\n      value: function _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n          if (y === 'top') {\n            y = 'bottom';\n          } else if (y === 'bottom') {\n            y = 'top';\n          }\n        } else {\n          if (x === 'end') {\n            x = 'start';\n          } else if (x === 'start') {\n            x = 'end';\n          }\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      }\n      /** Binds the pointer events to the tooltip trigger. */\n\n    }, {\n      key: \"_setupPointerEnterEventsIfNeeded\",\n      value: function _setupPointerEnterEventsIfNeeded() {\n        var _this7 = this;\n\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n          return;\n        } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n        if (this._platformSupportsMouseEvents()) {\n          this._passiveListeners.push(['mouseenter', function () {\n            _this7._setupPointerExitEventsIfNeeded();\n\n            _this7.show();\n          }]);\n        } else if (this.touchGestures !== 'off') {\n          this._disableNativeGesturesIfNecessary();\n\n          this._passiveListeners.push(['touchstart', function () {\n            // Note that it's important that we don't `preventDefault` here,\n            // because it can prevent click events from firing on the element.\n            _this7._setupPointerExitEventsIfNeeded();\n\n            clearTimeout(_this7._touchstartTimeout);\n            _this7._touchstartTimeout = setTimeout(function () {\n              return _this7.show();\n            }, LONGPRESS_DELAY);\n          }]);\n        }\n\n        this._addListeners(this._passiveListeners);\n      }\n    }, {\n      key: \"_setupPointerExitEventsIfNeeded\",\n      value: function _setupPointerExitEventsIfNeeded() {\n        var _this8 = this,\n            _this$_passiveListene;\n\n        if (this._pointerExitEventsInitialized) {\n          return;\n        }\n\n        this._pointerExitEventsInitialized = true;\n        var exitListeners = [];\n\n        if (this._platformSupportsMouseEvents()) {\n          exitListeners.push(['mouseleave', function () {\n            return _this8.hide();\n          }], ['wheel', function (event) {\n            return _this8._wheelListener(event);\n          }]);\n        } else if (this.touchGestures !== 'off') {\n          this._disableNativeGesturesIfNecessary();\n\n          var touchendListener = function touchendListener() {\n            clearTimeout(_this8._touchstartTimeout);\n\n            _this8.hide(_this8._defaultOptions.touchendHideDelay);\n          };\n\n          exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n\n        this._addListeners(exitListeners);\n\n        (_this$_passiveListene = this._passiveListeners).push.apply(_this$_passiveListene, exitListeners);\n      }\n    }, {\n      key: \"_addListeners\",\n      value: function _addListeners(listeners) {\n        var _this9 = this;\n\n        listeners.forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              event = _ref4[0],\n              listener = _ref4[1];\n\n          _this9._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n      }\n    }, {\n      key: \"_platformSupportsMouseEvents\",\n      value: function _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n      }\n      /** Listener for the `wheel` event on the element. */\n\n    }, {\n      key: \"_wheelListener\",\n      value: function _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n          // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n          var doc = this._document || document;\n          var elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n          var element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n          // won't fire if the user scrolls away using the wheel without moving their cursor. We\n          // work around it by finding the element under the user's cursor and closing the tooltip\n          // if it's not the trigger.\n\n          if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n            this.hide();\n          }\n        }\n      }\n      /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n    }, {\n      key: \"_disableNativeGesturesIfNecessary\",\n      value: function _disableNativeGesturesIfNecessary() {\n        var gestures = this.touchGestures;\n\n        if (gestures !== 'off') {\n          var element = this._elementRef.nativeElement;\n          var _style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n          // textareas, because it prevents the user from typing into them on iOS Safari.\n\n          if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n            _style.userSelect = _style.msUserSelect = _style.webkitUserSelect = _style.MozUserSelect = 'none';\n          } // If we have `auto` gestures and the element uses native HTML dragging,\n          // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n          if (gestures === 'on' || !element.draggable) {\n            _style.webkitUserDrag = 'none';\n          }\n\n          _style.touchAction = 'none';\n          _style.webkitTapHighlightColor = 'transparent';\n        }\n      }\n    }]);\n\n    return MatTooltip;\n  }();\n\n  MatTooltip.ɵfac = function MatTooltip_Factory(t) {\n    return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostAttrs: [1, \"mat-tooltip-trigger\"],\n    inputs: {\n      showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n      position: [\"matTooltipPosition\", \"position\"],\n      disabled: [\"matTooltipDisabled\", \"disabled\"],\n      message: [\"matTooltip\", \"message\"],\n      tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n    },\n    exportAs: [\"matTooltip\"]\n  });\n  return MatTooltip;\n}();\n\nvar TooltipComponent = /*@__PURE__*/function () {\n  var TooltipComponent = /*#__PURE__*/function () {\n    function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n      _classCallCheck(this, TooltipComponent);\n\n      this._changeDetectorRef = _changeDetectorRef;\n      this._breakpointObserver = _breakpointObserver;\n      /** Property watched by the animation framework to show or hide the tooltip */\n\n      this._visibility = 'initial';\n      /** Whether interactions on the page should close the tooltip */\n\n      this._closeOnInteraction = false;\n      /** Subject for notifying that the tooltip has been hidden from the view */\n\n      this._onHide = new Subject();\n      /** Stream that emits whether the user has a handset-sized display.  */\n\n      this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n\n\n    _createClass(TooltipComponent, [{\n      key: \"show\",\n      value: function show(delay) {\n        var _this10 = this;\n\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n          clearTimeout(this._hideTimeoutId);\n          this._hideTimeoutId = null;\n        } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(function () {\n          _this10._visibility = 'visible';\n          _this10._showTimeoutId = null; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this10._markForCheck();\n        }, delay);\n      }\n      /**\n       * Begins the animation to hide the tooltip after the provided delay in ms.\n       * @param delay Amount of milliseconds to delay showing the tooltip.\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide(delay) {\n        var _this11 = this;\n\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n          clearTimeout(this._showTimeoutId);\n          this._showTimeoutId = null;\n        }\n\n        this._hideTimeoutId = setTimeout(function () {\n          _this11._visibility = 'hidden';\n          _this11._hideTimeoutId = null; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this11._markForCheck();\n        }, delay);\n      }\n      /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n    }, {\n      key: \"afterHidden\",\n      value: function afterHidden() {\n        return this._onHide;\n      }\n      /** Whether the tooltip is being displayed. */\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this._visibility === 'visible';\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._onHide.complete();\n      }\n    }, {\n      key: \"_animationStart\",\n      value: function _animationStart() {\n        this._closeOnInteraction = false;\n      }\n    }, {\n      key: \"_animationDone\",\n      value: function _animationDone(event) {\n        var toState = event.toState;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n          this._onHide.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n          this._closeOnInteraction = true;\n        }\n      }\n      /**\n       * Interactions on the HTML body should close the tooltip immediately as defined in the\n       * material design spec.\n       * https://material.io/design/components/tooltips.html#behavior\n       */\n\n    }, {\n      key: \"_handleBodyInteraction\",\n      value: function _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n          this.hide(0);\n        }\n      }\n      /**\n       * Marks that the tooltip needs to be checked in the next change detection run.\n       * Mainly used for rendering the initial text before positioning a tooltip, which\n       * can be problematic in components with OnPush change detection.\n       */\n\n    }, {\n      key: \"_markForCheck\",\n      value: function _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n      }\n    }]);\n\n    return TooltipComponent;\n  }();\n\n  TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n    return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n  };\n\n  TooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostVars: 2,\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n      }\n    },\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n          return ctx._animationStart();\n        })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n          return ctx._animationDone($event);\n        });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var tmp_0_0 = null;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [ɵngcc7.NgClass],\n    pipes: [ɵngcc7.AsyncPipe],\n    styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTooltipAnimations.tooltipState]\n    },\n    changeDetection: 0\n  });\n  return TooltipComponent;\n}();\n\nvar MatTooltipModule = /*@__PURE__*/function () {\n  var MatTooltipModule = function MatTooltipModule() {\n    _classCallCheck(this, MatTooltipModule);\n  };\n\n  MatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  MatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function MatTooltipModule_Factory(t) {\n      return new (t || MatTooltipModule)();\n    },\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n  });\n  return MatTooltipModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":null,"metadata":{},"sourceType":"module"}